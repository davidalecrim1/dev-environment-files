[
    {
        "key": "ctrl+shift+b",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "command": "workbench.action.toggleSidebarVisibility",
        "key": "ctrl+e"
    },
    {
        "command": "workbench.files.action.focusFilesExplorer",
        "key": "ctrl+e",
        "when": "editorTextFocus"
    },
    {
        "key": "n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "command": "renameFile",
        "key": "r",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "command": "deleteFile",
        "key": "d",
        "when": "filesExplorerFocus && !inputFocus"
    },
    // EXTRA
    {
        "key": "ctrl+shift+5",
        "command": "editor.emmet.action.matchTag"
    },
    {
        "key": "ctrl+z",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "escape escape",
        "command": "workbench.action.exitZenMode",
        "when": "inZenMode"
    },
    {
        "key": "shift+escape",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "shift+escape",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inInlineEditsPreviewEditor"
    },
    {
        "key": "escape",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inInlineEditsPreviewEditor"
    },
    {
        "key": "escape",
        "command": "editor.closeTestPeek",
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
    },
    {
        "key": "shift+cmd+j",
        "command": "aiSettings.action.openhidden",
        "when": "!isSettingsPaneOpen"
    },
    {
        "key": "shift+escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "cmd+down",
        "command": "cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+down",
        "command": "cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+down",
        "command": "cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+left",
        "command": "cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+pagedown",
        "command": "cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+pageup",
        "command": "cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+right",
        "command": "cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+up",
        "command": "cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "down",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+right",
        "command": "cursorEnd",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "end",
        "command": "cursorEnd",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+cmd+right",
        "command": "cursorEndSelect",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+end",
        "command": "cursorEndSelect",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "cmd+left",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "home",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+left",
        "command": "cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+home",
        "command": "cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "left",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "cursorLineEnd",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "cursorLineEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "cursorLineStart",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+a",
        "command": "cursorLineStartSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "cursorPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "cursorPageDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pageup",
        "command": "cursorPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "cursorPageUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "right",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+up",
        "command": "cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+up",
        "command": "cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "up",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+h",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+delete",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+d",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "delete",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+a",
        "command": "editor.action.selectAll"
    },
    {
        "key": "cmd+c",
        "command": "execCopy"
    },
    {
        "key": "cmd+x",
        "command": "execCut"
    },
    {
        "key": "cmd+v",
        "command": "execPaste"
    },
    {
        "key": "cmd+p",
        "command": "expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+o",
        "command": "lineBreakInsert",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+tab",
        "command": "outdent",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "shift+cmd+z",
        "command": "redo"
    },
    {
        "key": "ctrl+pagedown",
        "command": "scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+pageup",
        "command": "scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+pagedown",
        "command": "scrollPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+pageup",
        "command": "scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "cmd+z",
        "command": "undo"
    },
    {
        "key": "shift+down",
        "command": "cursorColumnSelectDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "cursorColumnSelectLeft",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "cursorColumnSelectPageDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "cursorColumnSelectPageUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "cursorColumnSelectRight",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorColumnSelectUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "escape",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "cmd+down",
        "command": "notebook.cell.chat.arrowOutDown",
        "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
    },
    {
        "key": "cmd+up",
        "command": "notebook.cell.chat.arrowOutUp",
        "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
    },
    {
        "key": "cmd+up",
        "command": "notebook.cell.focusChatWidget",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "cmd+down",
        "command": "notebook.cell.focusNextChatWidget",
        "when": "editorTextFocus && inputFocus && isCompositeNotebook && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top' || editorTextFocus && inputFocus && notebookCellEditorFocused && !accessibilityModeEnabled && !isCompositeNotebook && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "escape",
        "command": "notebook.cell.chat.acceptChanges",
        "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused"
    },
    {
        "key": "down",
        "command": "notebook.cell.chat.nextFromHistory",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "up",
        "command": "notebook.cell.chat.previousFromHistory",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "f12",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f12",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "cmd+enter",
        "command": "refactorPreview.apply",
        "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
    },
    {
        "key": "alt+enter",
        "command": "testing.editFocusedTest",
        "when": "focusedView == 'workbench.view.testing'"
    },
    {
        "key": "escape",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'"
    },
    {
        "key": "cmd+f",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "cmd+e",
        "command": "actions.findWithSelection"
    },
    {
        "key": "enter",
        "command": "breakpointWidget.action.acceptInput",
        "when": "breakpointWidgetVisible && inBreakpointWidget"
    },
    {
        "key": "shift+escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "cmd+u",
        "command": "cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "alt+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "cursorWordEndRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+left",
        "command": "cursorWordLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+left",
        "command": "cursorWordPartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "cursorWordPartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+right",
        "command": "cursorWordPartRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "deleteAllLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "cmd+delete",
        "command": "deleteAllRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k",
        "command": "deleteAllRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+backspace",
        "command": "deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "deleteWordPartLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+delete",
        "command": "deleteWordPartRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+delete",
        "command": "deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "f7",
        "command": "editor.action.accessibleDiffViewer.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.accessibleDiffViewer.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "cmd+k cmd+c",
        "command": "editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+r cmd+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+.",
        "command": "editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+alt+a",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "editor.action.cancelSelectionAnchor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "cmd+f2",
        "command": "editor.action.changeAll",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+c",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "cmd+x",
        "command": "editor.action.clipboardCutAction"
    },
    {
        "key": "cmd+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "cmd+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+k",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+f3",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f3",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "enter",
        "command": "editor.action.extensioneditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.extensioneditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "cmd+f",
        "command": "editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "cmd+r cmd+f",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+down",
        "command": "editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "end",
        "command": "editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "enter",
        "command": "editor.action.goToFocusedStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "cmd+f12",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    {
        "key": "shift+f12",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+up",
        "command": "editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "home",
        "command": "editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "escape",
        "command": "editor.action.hideColorPicker",
        "when": "standaloneColorPickerVisible"
    },
    {
        "key": "shift+cmd+.",
        "command": "editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+,",
        "command": "editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+]",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+j",
        "command": "editor.action.inlineDiffs.nextChange",
        "when": "editorTextFocus && @inlineDiffs.nextChange.isActiveEditorWithDiffs"
    },
    {
        "key": "alt+k",
        "command": "editor.action.inlineDiffs.previousChange",
        "when": "editorTextFocus && @inlineDiffs.previousChange.isActiveEditorWithDiffs"
    },
    {
        "key": "alt+]",
        "command": "editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+[",
        "command": "editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "editor.action.insertColorWithStandaloneColorPicker",
        "when": "standaloneColorPickerFocused"
    },
    {
        "key": "alt+cmd+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+enter",
        "command": "editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+j",
        "command": "editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+\\",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+f2",
        "command": "editor.action.linkedEditing",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f8",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+f8",
        "command": "editor.action.marker.this",
        "when": "editorFocus"
    },
    {
        "key": "alt+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+r cmd+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+f9",
        "command": "editor.action.nextCommentThreadAction"
    },
    {
        "key": "alt+f10",
        "command": "editor.action.nextCommentedRangeAction",
        "when": "activeEditorHasCommentingRange"
    },
    {
        "key": "cmd+r alt+cmd+down",
        "command": "editor.action.nextCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "f3",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+g",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "enter",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "cmd+f3",
        "command": "editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+o",
        "command": "editor.action.organizeImports",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "cmd+[",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pagedown",
        "command": "editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+up",
        "command": "editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pageup",
        "command": "editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+f12",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+cmd+f12",
        "command": "editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+alt+f9",
        "command": "editor.action.previousCommentThreadAction"
    },
    {
        "key": "shift+alt+f10",
        "command": "editor.action.previousCommentedRangeAction",
        "when": "activeEditorHasCommentingRange"
    },
    {
        "key": "cmd+r alt+cmd+up",
        "command": "editor.action.previousCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "shift+f3",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+g",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "shift+cmd+f3",
        "command": "editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+.",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "editor.action.refactor",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+cmd+backspace",
        "command": "editor.action.removeBrackets",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+k cmd+u",
        "command": "editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+r cmd+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f12",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus"
    },
    {
        "key": "cmd+f12",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
    },
    {
        "key": "cmd+r f12",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+r cmd+f12",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
    },
    {
        "key": "down",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "left",
        "command": "editor.action.scrollLeftHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "right",
        "command": "editor.action.scrollRightHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "up",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "escape",
        "command": "editor.action.selectEditor",
        "when": "stickyScrollFocused"
    },
    {
        "key": "cmd+r cmd+k",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "shift+cmd+l",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "down",
        "command": "editor.action.selectNextStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "up",
        "command": "editor.action.selectPreviousStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "cmd+r cmd+b",
        "command": "editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+f10",
        "command": "editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+r cmd+i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+right",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+right",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+left",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+left",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+f",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.submitComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+z",
        "command": "editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+t",
        "command": "editor.action.transposeLetters",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+space",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "cmd+i",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "alt+escape",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "cmd+r cmd+x",
        "command": "editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "editor.action.webvieweditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.webvieweditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "cmd+f",
        "command": "editor.action.webvieweditor.showFind",
        "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "f7",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "escape",
        "command": "editor.cancelOperation",
        "when": "cancellableOperation"
    },
    {
        "key": "cmd+.",
        "command": "editor.changeDropType",
        "when": "dropWidgetVisible"
    },
    {
        "key": "cmd+.",
        "command": "editor.changePasteType",
        "when": "pasteWidgetVisible"
    },
    {
        "key": "cmd+r cmd+,",
        "command": "editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "escape",
        "command": "editor.debug.action.closeExceptionWidget",
        "when": "exceptionWidgetVisible"
    },
    {
        "key": "cmd+r cmd+i",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f9",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "tab",
        "command": "editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "alt+cmd+[",
        "command": "editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+0",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+/",
        "command": "editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+-",
        "command": "editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+8",
        "command": "editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+1",
        "command": "editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+2",
        "command": "editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+3",
        "command": "editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+4",
        "command": "editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+5",
        "command": "editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+6",
        "command": "editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+7",
        "command": "editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+[",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "f12",
        "command": "editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "editor.hideDropWidget",
        "when": "dropWidgetVisible"
    },
    {
        "key": "escape",
        "command": "editor.hidePasteWidget",
        "when": "pasteWidgetVisible"
    },
    {
        "key": "cmd+r cmd+.",
        "command": "editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+l",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r shift+cmd+l",
        "command": "editor.toggleFoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+cmd+]",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+j",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+=",
        "command": "editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+9",
        "command": "editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+r cmd+]",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "escape",
        "command": "inlayHints.stopReadingLineWithHint",
        "when": "isReadingLineWithInlayHints"
    },
    {
        "key": "tab",
        "command": "insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "cmd+enter",
        "command": "interactive.execute",
        "when": "isCompositeNotebook && activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "shift+enter",
        "command": "interactive.execute",
        "when": "config.interactiveWindow.executeWithShiftEnter && isCompositeNotebook && activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "enter",
        "command": "interactive.execute",
        "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "escape",
        "command": "notebook.cell.chat.discard",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
    },
    {
        "key": "pagedown",
        "command": "notebook.cell.cursorPageDown",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+pagedown",
        "command": "notebook.cell.cursorPageDownSelect",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
    },
    {
        "key": "pageup",
        "command": "notebook.cell.cursorPageUp",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+pageup",
        "command": "notebook.cell.cursorPageUpSelect",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "alt+enter",
        "command": "notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+cmd+v",
        "command": "notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "down",
        "command": "notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "shift+alt+f",
        "command": "notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+enter",
        "command": "openReferenceToSide",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "cmd+f",
        "command": "repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "alt+cmd+f",
        "command": "repl.action.find",
        "when": "inDebugRepl || inDebugRepl && focusedView == 'workbench.panel.repl.view'"
    },
    {
        "key": "cmd+enter",
        "command": "repl.execute",
        "when": "isCompositeNotebook && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
    },
    {
        "key": "shift+enter",
        "command": "repl.execute",
        "when": "config.interactiveWindow.executeWithShiftEnter && isCompositeNotebook && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
    },
    {
        "key": "enter",
        "command": "repl.execute",
        "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
    },
    {
        "key": "alt+end alt+end",
        "command": "repl.focusLastItemExecuted",
        "when": "isCompositeNotebook && mostRecentReplEditor || mostRecentReplEditor && !notebookCellListFocused"
    },
    {
        "key": "cmd+down",
        "command": "repl.input.focus",
        "when": "isCompositeNotebook && notebookEditorFocused"
    },
    {
        "key": "shift+cmd+r",
        "command": "rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "search.searchEditor.action.deleteFileResults",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "settings.action.clearSearchResults",
        "when": "inSettingsEditor && inSettingsSearch"
    },
    {
        "key": "down",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "cmd+f",
        "command": "settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "cmd+/",
        "command": "toggleExplainMode",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "cmd+r f2",
        "command": "togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "escape",
        "command": "welcome.goBack",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "cmd+r alt+cmd+c",
        "command": "workbench.action.addComment",
        "when": "activeCursorHasCommentingRange"
    },
    {
        "key": "escape",
        "command": "workbench.action.closeActiveEditorPromptBars",
        "when": "editorHasPromptBar && editorTextFocus && !editorPromptBarFocused"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus && !textCompareEditorActive && quickDiffDecorationCount != '0'"
    },
    {
        "key": "shift+alt+f5",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus && !textCompareEditorActive && quickDiffDecorationCount != '0'"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused || commentFocused"
    },
    {
        "key": "escape",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused || commentFocused"
    },
    {
        "key": "cmd+right",
        "command": "editor.action.inlineSuggest.acceptNextWord",
        "when": "cppSuggestion && !editorReadonly || inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+f8",
        "command": "testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+alt+f8",
        "command": "testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "alt+cmd+enter",
        "command": "editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "shift+cmd+1",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "enter",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.selectAllMatches",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "alt+cmd+c",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+l",
        "command": "toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+p",
        "command": "togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "cmd+enter",
        "command": "notebook.cell.chat.acceptChanges",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
    },
    {
        "key": "tab",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "escape",
        "command": "leaveEditorMessage",
        "when": "messageVisible"
    },
    {
        "key": "shift+escape",
        "command": "leaveSnippet",
        "when": "inSnippetMode && textInputFocus"
    },
    {
        "key": "escape",
        "command": "leaveSnippet",
        "when": "inSnippetMode && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeQuickDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "closeQuickDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "ctrl+n",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+down",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "down",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+p",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+up",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "up",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "shift+tab",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+enter",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "escape",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inlineEditIsVisible || inlineSuggestionVisible"
    },
    {
        "key": "cmd+i",
        "command": "focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+space",
        "command": "focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "shift+escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "shift+tab",
        "command": "insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "cmd+pagedown",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "pagedown",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "cmd+down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "cmd+pageup",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "pageup",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "cmd+up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "cmd+i",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+alt+space",
        "command": "toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "cmd+enter",
        "command": "acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "shift+escape",
        "command": "cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "escape",
        "command": "cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "shift+escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "down",
        "command": "focusNextRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "up",
        "command": "focusPreviousRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "cmd+k cmd+i",
        "command": "workbench.action.showHover",
        "when": "!editorTextFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "cmd+r cmd+g",
        "command": "aiFeedback.action.open"
    },
    {
        "key": "shift+cmd+;",
        "command": "breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "shift+cmd+.",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "alt+right",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "right",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+left",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "left",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "cmd+enter",
        "command": "breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "cmd+enter",
        "command": "breadcrumbs.revealFocusedFromTreeAside",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "down",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "enter",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "shift+cmd+.",
        "command": "breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "cmd+c",
        "command": "chat.inlineResourceAnchor.copyResource",
        "when": "chatAttachmentResource"
    },
    {
        "key": "cmd+enter",
        "command": "chatEditing.acceptAllFiles",
        "when": "hasUndecidedChatEditingResource && inChatInput && !chatSessionRequestInProgress"
    },
    {
        "key": "cmd+backspace",
        "command": "chatEditing.discardAllFiles",
        "when": "hasUndecidedChatEditingResource && inChatInput && !chatInputHasText && !chatSessionRequestInProgress"
    },
    {
        "key": "escape",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
        "key": "alt+cmd+/",
        "command": "cmdk.togglePromptBarModel",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "cmd+/",
        "command": "cmdk.togglePromptBarModel",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "escape",
        "command": "commentsClearFilterText",
        "when": "commentsFilterFocus"
    },
    {
        "key": "cmd+f",
        "command": "commentsFocusFilter",
        "when": "focusedView == 'workbench.panel.comments'"
    },
    {
        "key": "cmd+down",
        "command": "commentsFocusViewFromFilter",
        "when": "commentsFilterFocus"
    },
    {
        "key": "cmd+]",
        "command": "composer.nextChatTab",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "alt+cmd+p",
        "command": "composer.openAddContextMenu",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "alt+cmd+/",
        "command": "composer.openModelToggle",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "cmd+/",
        "command": "composer.openModelToggle",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "cmd+[",
        "command": "composer.previousChatTab",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "cmd+r alt+cmd+c",
        "command": "copyFilePath",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+cmd+c",
        "command": "copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "cmd+r shift+alt+cmd+c",
        "command": "copyRelativeFilePath",
        "when": "editorFocus"
    },
    {
        "key": "cmd+left",
        "command": "cursorWordAccessibilityLeft",
        "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
    },
    {
        "key": "shift+cmd+left",
        "command": "cursorWordAccessibilityLeftSelect",
        "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
    },
    {
        "key": "cmd+right",
        "command": "cursorWordAccessibilityRight",
        "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
    },
    {
        "key": "shift+cmd+right",
        "command": "cursorWordAccessibilityRightSelect",
        "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
    },
    {
        "key": "alt+cmd+c",
        "command": "debug.copyWatchExpression",
        "when": "watchExpressionsExist && !expressionSelected && focusedView == 'workbench.debug.watchExpressionsView'"
    },
    {
        "key": "alt+enter",
        "command": "debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "cmd+enter",
        "command": "debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "cmd+f5",
        "command": "debug.openView",
        "when": "!debuggersAvailable"
    },
    {
        "key": "f5",
        "command": "debug.openView",
        "when": "!debuggersAvailable"
    },
    {
        "key": "cmd+backspace",
        "command": "debug.removeBreakpoint",
        "when": "breakpointsFocused && !breakpointInputFocused"
    },
    {
        "key": "cmd+backspace",
        "command": "debug.removeWatchExpression",
        "when": "watchExpressionsFocused && !expressionSelected"
    },
    {
        "key": "alt+-",
        "command": "decreaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+f1",
        "command": "editor.action.accessibilityHelp",
        "when": "!accessibilityHelpIsShown"
    },
    {
        "key": "alt+a",
        "command": "editor.action.accessibilityHelpConfigureAssignedKeybindings",
        "when": "accessibilityHelpIsShown && accessibleViewHasAssignedKeybindings"
    },
    {
        "key": "alt+k",
        "command": "editor.action.accessibilityHelpConfigureKeybindings",
        "when": "accessibilityHelpIsShown && accessibleViewHasUnassignedKeybindings"
    },
    {
        "key": "alt+h",
        "command": "editor.action.accessibilityHelpOpenHelpLink",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "alt+f2",
        "command": "editor.action.accessibleView"
    },
    {
        "key": "ctrl+/",
        "command": "editor.action.accessibleViewAcceptInlineCompletion",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'"
    },
    {
        "key": "alt+f6",
        "command": "editor.action.accessibleViewDisableHint",
        "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled"
    },
    {
        "key": "alt+]",
        "command": "editor.action.accessibleViewNext",
        "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
    },
    {
        "key": "alt+cmd+pagedown",
        "command": "editor.action.accessibleViewNextCodeBlock",
        "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'inlineChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'quickChat'"
    },
    {
        "key": "alt+[",
        "command": "editor.action.accessibleViewPrevious",
        "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
    },
    {
        "key": "alt+cmd+pageup",
        "command": "editor.action.accessibleViewPreviousCodeBlock",
        "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'inlineChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'quickChat'"
    },
    {
        "key": "cmd+r cmd+k",
        "command": "editor.action.defineKeybinding",
        "when": "resource == 'vscode-userdata:/Users/davidalecrim/Library/Application%20Support/Cursor/User/keybindings.json'"
    },
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        "key": "alt+cmd+o",
        "command": "editor.action.toggleOvertypeInsertMode"
    },
    {
        "key": "shift+f9",
        "command": "editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+d",
        "command": "editor.detectLanguage",
        "when": "editorTextFocus && !notebookEditable"
    },
    {
        "key": "shift+enter",
        "command": "editor.refocusCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "shift+enter",
        "command": "editor.refocusTypeHierarchy",
        "when": "typeHierarchyVisible"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showSubtypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showSupertypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
    },
    {
        "key": "ctrl+enter",
        "command": "explorer.openToSide",
        "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "alt+down",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "alt+up",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "iconSelectBox.focusDown",
        "when": "iconSelectBoxFocus"
    },
    {
        "key": "right",
        "command": "iconSelectBox.focusNext",
        "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
    },
    {
        "key": "left",
        "command": "iconSelectBox.focusPrevious",
        "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
    },
    {
        "key": "up",
        "command": "iconSelectBox.focusUp",
        "when": "iconSelectBoxFocus"
    },
    {
        "key": "enter",
        "command": "iconSelectBox.selectFocused",
        "when": "iconSelectBoxFocus"
    },
    {
        "key": "alt+=",
        "command": "increaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "cmd+i",
        "command": "inlineChat.holdForSpeech",
        "when": "hasSpeechProvider && inlineChatVisible && textInputFocus"
    },
    {
        "key": "cmd+i",
        "command": "inlineChat2.reveal",
        "when": "inlineChatHasEditsAgent && !chatEdits.isGlobalEditingSession && chatEdits.requestCount >= 1"
    },
    {
        "key": "cmd+i",
        "command": "inlineChat2.stop",
        "when": "inlineChatHasEditsAgent && inlineChatVisible && chatEdits.requestCount == '0'"
    },
    {
        "key": "escape",
        "command": "inlineChat2.stop",
        "when": "inlineChatHasEditsAgent && inlineChatVisible"
    },
    {
        "key": "cmd+up",
        "command": "interactive.history.focus",
        "when": "isCompositeNotebook && isLinux && !notebookEditorFocused || isCompositeNotebook && isWindows && !notebookEditorFocused"
    },
    {
        "key": "down",
        "command": "interactive.history.next",
        "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "interactive.history.previous",
        "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "cmd+down",
        "command": "interactive.scrollToBottom",
        "when": "activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "cmd+up",
        "command": "interactive.scrollToTop",
        "when": "activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "enter",
        "command": "keybindings.editor.acceptWhenExpression",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
    },
    {
        "key": "cmd+r cmd+a",
        "command": "keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "escape",
        "command": "keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "cmd+c",
        "command": "keybindings.editor.copyKeybindingEntry",
        "when": "inKeybindings && keybindingFocus && !whenFocus"
    },
    {
        "key": "enter",
        "command": "keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus && !whenFocus"
    },
    {
        "key": "cmd+r cmd+e",
        "command": "keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "cmd+down",
        "command": "keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+cmd+k",
        "command": "keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "escape",
        "command": "keybindings.editor.rejectWhenExpression",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
    },
    {
        "key": "cmd+backspace",
        "command": "keybindings.editor.removeKeybinding",
        "when": "inKeybindings && keybindingFocus && !inputFocus"
    },
    {
        "key": "cmd+f",
        "command": "keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "alt+cmd+p",
        "command": "keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "escape",
        "command": "list.clear",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "escape",
        "command": "list.closeFind",
        "when": "listFocus && treeFindOpen"
    },
    {
        "key": "cmd+up",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "left",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+cmd+up",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "cmd+left",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "right",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+down",
        "command": "list.expandSelectionDown",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+up",
        "command": "list.expandSelectionUp",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "f3",
        "command": "list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "alt+cmd+f",
        "command": "list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "ctrl+alt+n",
        "command": "list.focusAnyDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+down",
        "command": "list.focusAnyDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+home",
        "command": "list.focusAnyFirst",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+end",
        "command": "list.focusAnyLast",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+alt+p",
        "command": "list.focusAnyUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+up",
        "command": "list.focusAnyUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "down",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "home",
        "command": "list.focusFirst",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "end",
        "command": "list.focusLast",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "pagedown",
        "command": "list.focusPageDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "pageup",
        "command": "list.focusPageUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "up",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "cmd+down",
        "command": "list.scrollDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
    },
    {
        "key": "cmd+up",
        "command": "list.scrollUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
    },
    {
        "key": "cmd+down",
        "command": "list.select",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "cmd+a",
        "command": "list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "cmd+r cmd+i",
        "command": "list.showHover",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "space",
        "command": "list.toggleExpand",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+cmd+enter",
        "command": "list.toggleSelection",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "backspace",
        "command": "noteMultiCursor.deleteLeft",
        "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'"
    },
    {
        "key": "delete",
        "command": "noteMultiCursor.deleteRight",
        "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'"
    },
    {
        "key": "escape",
        "command": "noteMultiCursor.exit",
        "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "cmd+d",
        "command": "notebook.addFindMatchToSelection",
        "when": "config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "cmd+k m",
        "command": "notebook.cell.changeLanguage",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "y",
        "command": "notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
    },
    {
        "key": "m",
        "command": "notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
    },
    {
        "key": "enter",
        "command": "notebook.cell.chat.accept",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
    },
    {
        "key": "cmd+enter",
        "command": "notebook.cell.chat.acceptChanges",
        "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'"
    },
    {
        "key": "cmd+down",
        "command": "notebook.cell.chat.focus",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'"
    },
    {
        "key": "cmd+up",
        "command": "notebook.cell.chat.focus",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'"
    },
    {
        "key": "cmd+down",
        "command": "notebook.cell.chat.focusNextCell",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "cmd+up",
        "command": "notebook.cell.chat.focusPreviousCell",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "cmd+r i",
        "command": "notebook.cell.chat.start",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+i",
        "command": "notebook.cell.chat.start",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+delete",
        "command": "notebook.cell.clearOutputs",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+r cmd+c",
        "command": "notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "cmd+r t",
        "command": "notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "shift+alt+down",
        "command": "notebook.cell.copyDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "notebook.cell.copyUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
    },
    {
        "key": "shift+alt+d",
        "command": "notebook.cell.detectLanguage",
        "when": "notebookCellEditable && notebookEditable"
    },
    {
        "key": "enter",
        "command": "notebook.cell.edit",
        "when": "notebookCellListFocused && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
    },
    {
        "key": "cmd+r cmd+c",
        "command": "notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "cmd+r t",
        "command": "notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "cmd+down",
        "command": "notebook.cell.focusInOutput",
        "when": "isWindows && notebookCellHasOutputs && notebookEditorFocused && !isCompositeNotebook"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "shift+cmd+enter",
        "command": "notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    {
        "key": "ctrl+shift+alt+j",
        "command": "notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+j",
        "command": "notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+down",
        "command": "notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+.",
        "command": "notebook.cell.openFailureActions",
        "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused"
    },
    {
        "key": "cmd+r shift+cmd+\\",
        "command": "notebook.cell.split",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "cmd+r y",
        "command": "notebook.cell.toggleOutputScrolling",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "cmd+/",
        "command": "notebook.commentSelectedCells",
        "when": "notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+f3",
        "command": "notebook.diff.action.next",
        "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
    },
    {
        "key": "shift+alt+f3",
        "command": "notebook.diff.action.previous",
        "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
    },
    {
        "key": "cmd+f",
        "command": "notebook.find",
        "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "cmd+end",
        "command": "notebook.focusBottom",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+down",
        "command": "notebook.focusBottom",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    {
        "key": "down",
        "command": "notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "up",
        "command": "notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
    },
    {
        "key": "cmd+home",
        "command": "notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+up",
        "command": "notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    {
        "key": "left",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "alt+cmd+[",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "escape",
        "command": "notebook.hideFind",
        "when": "notebookEditorFocused && notebookFindWidgetFocused"
    },
    {
        "key": "shift+cmd+l",
        "command": "notebook.selectAllFindMatches",
        "when": "config.notebook.multiCursor.enabled && notebookFindWidgetFocused || config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "right",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "alt+cmd+]",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+cmd+a",
        "command": "notification.acceptPrimaryAction",
        "when": "notificationFocus || notificationToastsVisible"
    },
    {
        "key": "cmd+backspace",
        "command": "notification.clear",
        "when": "notificationFocus"
    },
    {
        "key": "left",
        "command": "notification.collapse",
        "when": "notificationFocus"
    },
    {
        "key": "right",
        "command": "notification.expand",
        "when": "notificationFocus"
    },
    {
        "key": "enter",
        "command": "notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "space",
        "command": "notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "home",
        "command": "notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pageup",
        "command": "notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "end",
        "command": "notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pagedown",
        "command": "notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "down",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "up",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "cmd+r shift+cmd+n",
        "command": "notifications.showList"
    },
    {
        "key": "escape",
        "command": "problems.action.clearFilterText",
        "when": "problemsFilterFocus"
    },
    {
        "key": "cmd+c",
        "command": "problems.action.copy",
        "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "cmd+f",
        "command": "problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "cmd+down",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "cmd+down",
        "command": "problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "enter",
        "command": "problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "problems.action.openToSide",
        "when": "problemFocus"
    },
    {
        "key": "cmd+.",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+alt+cmd+home",
        "command": "quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+home",
        "command": "quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+home",
        "command": "quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+home",
        "command": "quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+cmd+end",
        "command": "quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+end",
        "command": "quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+end",
        "command": "quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+end",
        "command": "quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+down",
        "command": "quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+j",
        "command": "quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "down",
        "command": "quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+cmd+down",
        "command": "quickInput.nextSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "quickInput.nextSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+cmd+down",
        "command": "quickInput.nextSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "cmd+down",
        "command": "quickInput.nextSeparatorWithQuickAccessFallback",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+cmd+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+cmd+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "cmd+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "pagedown",
        "command": "quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+cmd+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+cmd+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "cmd+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "pageup",
        "command": "quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+up",
        "command": "quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+k",
        "command": "quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "up",
        "command": "quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+cmd+up",
        "command": "quickInput.previousSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "quickInput.previousSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+cmd+up",
        "command": "quickInput.previousSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "cmd+up",
        "command": "quickInput.previousSeparatorWithQuickAccessFallback",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+space",
        "command": "quickInput.toggleHover",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "space",
        "command": "refactorPreview.toggleCheckedState",
        "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+cmd+r",
        "command": "revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "cmd+down",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "alt+cmd+s",
        "command": "saveAll"
    },
    {
        "key": "cmd+enter",
        "command": "scm.acceptInput",
        "when": "scmRepository"
    },
    {
        "key": "escape",
        "command": "scm.clearInput",
        "when": "scmRepository && !editorHasSelection && !suggestWidgetVisible"
    },
    {
        "key": "alt+down",
        "command": "scm.forceViewNextCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+up",
        "command": "scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "down",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "search.action.cancel",
        "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
    },
    {
        "key": "cmd+c",
        "command": "search.action.copyMatch",
        "when": "fileMatchOrMatchFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    {
        "key": "f4",
        "command": "search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "cmd+up",
        "command": "search.action.focusSearchFromResults",
        "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "cmd+enter",
        "command": "search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "cmd+down",
        "command": "search.action.openResult",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "enter",
        "command": "search.action.openResult",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "search.action.openResultToSide",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "cmd+backspace",
        "command": "search.action.remove",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "shift+cmd+1",
        "command": "search.action.replace",
        "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "alt+cmd+enter",
        "command": "search.action.replaceAll",
        "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
    },
    {
        "key": "shift+cmd+enter",
        "command": "search.action.replaceAllInFile",
        "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+cmd+1",
        "command": "search.action.replaceAllInFile",
        "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+cmd+enter",
        "command": "search.action.replaceAllInFolder",
        "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+cmd+1",
        "command": "search.action.replaceAllInFolder",
        "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+alt+f",
        "command": "search.action.restrictSearchToFolder",
        "when": "folderMatchWithResourceFocus && searchViewletVisible"
    },
    {
        "key": "cmd+i",
        "command": "search.action.searchWithAI",
        "when": "hasAIResultProviderKey && searchViewletFocus"
    },
    {
        "key": "cmd+down",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "cmd+up",
        "command": "search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "selectAllSearchEditorMatches",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
    },
    {
        "key": "enter",
        "command": "settings.action.focusSettingControl",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "down",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "enter",
        "command": "settings.action.focusSettingsList",
        "when": "inSettingsEditor && settingsTocRowFocus"
    },
    {
        "key": "left",
        "command": "settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "shift+f9",
        "command": "settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "cmd+; cmd+x",
        "command": "testing.cancelRun"
    },
    {
        "key": "cmd+; shift+cmd+a",
        "command": "testing.coverageAll"
    },
    {
        "key": "cmd+; shift+cmd+c",
        "command": "testing.coverageAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; shift+cmd+f",
        "command": "testing.coverageCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; shift+cmd+l",
        "command": "testing.coverageLastRun"
    },
    {
        "key": "cmd+; cmd+a",
        "command": "testing.debugAll"
    },
    {
        "key": "cmd+; cmd+c",
        "command": "testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; cmd+f",
        "command": "testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; cmd+e",
        "command": "testing.debugFailTests"
    },
    {
        "key": "cmd+; cmd+l",
        "command": "testing.debugLastRun"
    },
    {
        "key": "cmd+; cmd+m",
        "command": "testing.openOutputPeek"
    },
    {
        "key": "cmd+; e",
        "command": "testing.reRunFailTests"
    },
    {
        "key": "cmd+; l",
        "command": "testing.reRunLastRun"
    },
    {
        "key": "cmd+; cmd+r",
        "command": "testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "cmd+; a",
        "command": "testing.runAll"
    },
    {
        "key": "cmd+; c",
        "command": "testing.runAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; f",
        "command": "testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; cmd+o",
        "command": "testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "cmd+; shift+cmd+i",
        "command": "testing.toggleInlineCoverage"
    },
    {
        "key": "cmd+; cmd+i",
        "command": "testing.toggleInlineTestOutput"
    },
    {
        "key": "alt+h",
        "command": "testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "alt+cmd+c",
        "command": "toggleSearchCaseSensitive",
        "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+l",
        "command": "toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+cmd+r",
        "command": "toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+p",
        "command": "toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "cmd+down",
        "command": "widgetNavigation.focusNext",
        "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'"
    },
    {
        "key": "cmd+up",
        "command": "widgetNavigation.focusPrevious",
        "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'"
    },
    {
        "key": "cmd+i",
        "command": "workbench.action.chat.holdToVoiceChatInChatView",
        "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused && !searchViewletFocus"
    },
    {
        "key": "cmd+i",
        "command": "workbench.action.chat.startVoiceChat",
        "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress"
    },
    {
        "key": "cmd+i",
        "command": "workbench.action.chat.stopListeningAndSubmit",
        "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
    },
    {
        "key": "cmd+backspace",
        "command": "workbench.action.chat.undoEdits",
        "when": "inChat && !textInputFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "cmd+r cmd+w",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "cmd+r shift+cmd+w",
        "command": "workbench.action.closeAllGroups"
    },
    {
        "key": "cmd+r w",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "cmd+r f",
        "command": "workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "alt+cmd+t",
        "command": "workbench.action.closeOtherEditors"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "escape",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+r u",
        "command": "workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "shift+cmd+w",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "cmd+r shift+o",
        "command": "workbench.action.compareEditor.openSide",
        "when": "inDiffEditor"
    },
    {
        "key": "shift+alt+f5",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "cmd+r o",
        "command": "workbench.action.copyEditorToNewWindow",
        "when": "activeEditor"
    },
    {
        "key": "shift+f5",
        "command": "workbench.action.debug.disconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "shift+cmd+f5",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+f5",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "f5",
        "command": "workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "cmd+f11",
        "command": "workbench.action.debug.stepIntoTarget",
        "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f5",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "cmd+r m",
        "command": "workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "alt+cmd+v",
        "command": "workbench.action.editorDictation.start",
        "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress"
    },
    {
        "key": "cmd+r p",
        "command": "workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "cmd+n",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.files.openFile",
        "when": "false"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.files.openLocalFileFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "cmd+r r",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "cmd+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "shift+cmd+s",
        "command": "workbench.action.files.saveAs"
    },
    {
        "key": "shift+cmd+s",
        "command": "workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "cmd+r s",
        "command": "workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "cmd+r cmd+up",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "cmd+r cmd+down",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "cmd+8",
        "command": "workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "cmd+5",
        "command": "workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "cmd+1",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "cmd+4",
        "command": "workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "cmd+r cmd+left",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "f6",
        "command": "workbench.action.focusNextPart"
    },
    {
        "key": "shift+f6",
        "command": "workbench.action.focusPreviousPart"
    },
    {
        "key": "cmd+r cmd+right",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "cmd+2",
        "command": "workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "cmd+7",
        "command": "workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "cmd+0",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "cmd+6",
        "command": "workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "cmd+3",
        "command": "workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+g",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "shift+cmd+o",
        "command": "workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "down",
        "command": "workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "up",
        "command": "workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pagedown",
        "command": "workbench.action.interactivePlayground.pageDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pageup",
        "command": "workbench.action.interactivePlayground.pageUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "cmd+r shift+cmd+\\",
        "command": "workbench.action.joinEditorInGroup",
        "when": "sideBySideEditorActive"
    },
    {
        "key": "cmd+r enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.keychord.leader",
        "when": "false"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+0",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "cmd+r down",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "cmd+r left",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "cmd+r right",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "cmd+r up",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "cmd+r shift+cmd+left",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "cmd+r shift+cmd+right",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+cmd+1",
        "command": "workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "ctrl+cmd+9",
        "command": "workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "browserback",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "browserforward",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "cmd+r cmd+q",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "shift+cmd+n",
        "command": "workbench.action.newWindow"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "alt+cmd+right",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "cmd+r alt+cmd+right",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "shift+cmd+s",
        "command": "workbench.action.openAgentsView",
        "when": "!isInBackgroundComposerWindow"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "ctrl+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "ctrl+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "cmd+r cmd+s",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "cmd+,",
        "command": "workbench.action.openSettings"
    },
    {
        "key": "shift+cmd+u",
        "command": "workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "cmd+r shift+enter",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+cmd+left",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "cmd+r alt+cmd+left",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenView"
    },
    {
        "key": "cmd+q",
        "command": "workbench.action.quit"
    },
    {
        "key": "alt+cmd+o",
        "command": "workbench.action.remote.showMenu"
    },
    {
        "key": "shift+cmd+t",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "shift+cmd+h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "shift+cmd+j",
        "command": "workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "cmd+r cmd+t",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "alt+cmd+tab",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "f1",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "shift+cmd+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "cmd+r cmd+\\",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "cmd+r shift+cmd+\\",
        "command": "workbench.action.splitEditorInGroup",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "key": "cmd+r cmd+\\",
        "command": "workbench.action.splitEditorLeft"
    },
    {
        "key": "cmd+r cmd+\\",
        "command": "workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "cmd+r cmd+\\",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "cmd+r cmd+\\",
        "command": "workbench.action.splitEditorUp"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.switchWindow"
    },
    {
        "key": "shift+cmd+b",
        "command": "workbench.action.tasks.build",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.tasks.rerunForActiveTerminal",
        "when": "taskTerminalActive && terminalFocus"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.chat.close",
        "when": "chatIsEnabled && terminalChatFocus && terminalChatVisible || chatIsEnabled && terminalChatVisible && terminalFocus"
    },
    {
        "key": "alt+cmd+enter",
        "command": "workbench.action.terminal.chat.insertCommand",
        "when": "chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
    },
    {
        "key": "alt+enter",
        "command": "workbench.action.terminal.chat.insertCommand",
        "when": "chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
    },
    {
        "key": "alt+cmd+enter",
        "command": "workbench.action.terminal.chat.insertFirstCommand",
        "when": "chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "alt+enter",
        "command": "workbench.action.terminal.chat.insertFirstCommand",
        "when": "chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.terminal.chat.rerunRequest",
        "when": "chatIsEnabled && terminalChatFocus && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatFocus && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "cmd+enter",
        "command": "workbench.action.terminal.chat.runCommand",
        "when": "chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
    },
    {
        "key": "cmd+enter",
        "command": "workbench.action.terminal.chat.runFirstCommand",
        "when": "chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.clearSelection",
        "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
    },
    {
        "key": "shift+cmd+,",
        "command": "workbench.action.terminal.configureSuggestSettings",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "cmd+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
        "key": "f3",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "cmd+g",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "shift+enter",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
        "key": "shift+f3",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+g",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "enter",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
        "key": "cmd+down",
        "command": "workbench.action.terminal.focus",
        "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "cmd+up",
        "command": "workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+f2",
        "command": "workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "cmd+r cmd+i",
        "command": "workbench.action.terminal.focusHover",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+cmd+down",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+right",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+k cmd+j", // change between terminal windows
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "cmd+k cmd+k", // change between terminal windows
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "cmd+k cmd+n", // new terminal window
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus && !terminalEditorFocus"
    },
    {
        "key": "cmd+k cmd+d", // delete terminal window
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+cmd+up",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+left",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+\\",
        "command": "workbench.action.terminal.focusTabs",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "cmd+g",
        "command": "workbench.action.terminal.goToRecentDirectory",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "delete",
        "command": "workbench.action.terminal.killActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "workbench.action.terminal.killActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+`",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "shift+cmd+c",
        "command": "workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "cmd+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "enter",
        "command": "workbench.action.terminal.renameActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.terminal.runRecentCommand",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+alt+r",
        "command": "workbench.action.terminal.runRecentCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "alt+cmd+pagedown",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "pagedown",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "cmd+end",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "cmd+end",
        "command": "workbench.action.terminal.scrollToBottomAccessibleView",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "cmd+down",
        "command": "workbench.action.terminal.scrollToNextCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "cmd+up",
        "command": "workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "cmd+home",
        "command": "workbench.action.terminal.scrollToTop",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "cmd+home",
        "command": "workbench.action.terminal.scrollToTopAccessibleView",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "alt+cmd+pageup",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "pageup",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "cmd+a",
        "command": "workbench.action.terminal.selectAll",
        "when": "terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+down",
        "command": "workbench.action.terminal.selectToNextCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+up",
        "command": "workbench.action.terminal.selectToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+space",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~a"
        }
    },
    {
        "key": "alt+space",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~b"
        }
    },
    {
        "key": "shift+enter",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~c"
        }
    },
    {
        "key": "shift+cmd+right",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~d"
        }
    },
    {
        "key": "shift+cmd+left",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[1;2H"
        }
    },
    {
        "key": "ctrl+alt+r",
        "command": "workbench.action.terminal.sendSequence",
        "when": "accessibilityModeEnabled && terminalFocus",
        "args": {
            "text": "\u0012"
        }
    },
    {
        "key": "ctrl+alt+g",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0007"
        }
    },
    {
        "key": "alt+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0017"
        }
    },
    {
        "key": "alt+delete",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001bd"
        }
    },
    {
        "key": "cmd+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0015"
        }
    },
    {
        "key": "cmd+left",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0001"
        }
    },
    {
        "key": "cmd+right",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0005"
        }
    },
    {
        "key": "ctrl+shift+2",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0000"
        }
    },
    {
        "key": "ctrl+shift+6",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001e"
        }
    },
    {
        "key": "ctrl+/",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001f"
        }
    },
    {
        "key": "ctrl+space",
        "command": "workbench.action.terminal.sendSequence",
        "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~e"
        }
    },
    {
        "key": "cmd+.",
        "command": "workbench.action.terminal.showQuickFixes",
        "when": "terminalFocus"
    },
    {
        "key": "alt+z",
        "command": "workbench.action.terminal.sizeToContentWidth",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+5",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+5",
        "command": "workbench.action.terminal.splitActiveTab",
        "when": "terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.terminal.splitActiveTab",
        "when": "terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "ctrl+alt+space",
        "command": "workbench.action.terminal.suggestToggleDetailsFocus",
        "when": "!textInputFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+r",
        "command": "workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+w",
        "command": "workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "alt+cmd+b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "alt+cmd+0",
        "command": "workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "shift+cmd+enter",
        "command": "workbench.action.toggleFloatingPromptBar",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "ctrl+cmd+f",
        "command": "workbench.action.toggleFullScreen",
        "when": "!isIOS"
    },
    {
        "key": "cmd+r cmd+m",
        "command": "workbench.action.toggleMaximizeEditorGroup",
        "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "cmd+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+r z",
        "command": "workbench.action.toggleZenMode",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "key": "cmd+r shift+enter",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "cmd+numpad_add",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "shift+cmd+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "cmd+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "cmd+numpad_subtract",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "shift+cmd+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "cmd+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "cmd+numpad0",
        "command": "workbench.action.zoomReset"
    },
    {
        "key": "shift+cmd+m",
        "command": "workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "escape",
        "command": "workbench.actions.workbench.panel.output.clearFilterText",
        "when": "outputFilterFocus"
    },
    {
        "key": "escape",
        "command": "workbench.banner.focusBanner",
        "when": "bannerFocused"
    },
    {
        "key": "down",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "right",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "up",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "left",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+cmd+/",
        "command": "workbench.command.prompts.use",
        "when": "chatIsEnabled && config.chat.promptFiles"
    },
    {
        "key": "shift+alt+cmd+y",
        "command": "workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "cmd+c",
        "command": "workbench.debug.viewlet.action.copyValue",
        "when": "!expressionSelected && focusedView == 'workbench.debug.variablesView' || !expressionSelected && focusedView == 'workbench.debug.watchExpressionsView'"
    },
    {
        "key": "cmd+r c",
        "command": "workbench.files.action.compareWithClipboard"
    },
    {
        "key": "cmd+r d",
        "command": "workbench.files.action.compareWithSaved"
    },
    {
        "key": "cmd+r e",
        "command": "workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+cmd+i",
        "command": "workbench.panel.chat",
        "when": "workbench.panel.chat.view.copilot.active"
    },
    {
        "key": "shift+cmd+i",
        "command": "workbench.panel.chatEditing",
        "when": "workbench.panel.chat.view.edits.active"
    },
    {
        "key": "escape",
        "command": "workbench.statusBar.clearFocus",
        "when": "statusBarFocused"
    },
    {
        "key": "home",
        "command": "workbench.statusBar.focusFirst",
        "when": "statusBarFocused"
    },
    {
        "key": "end",
        "command": "workbench.statusBar.focusLast",
        "when": "statusBarFocused"
    },
    {
        "key": "down",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "right",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "up",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "left",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "shift+cmd+d",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "shift+cmd+e",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "shift+cmd+x",
        "command": "workbench.view.extensions",
        "when": "viewContainer.workbench.view.extensions.enabled"
    },
    {
        "key": "ctrl+shift+g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "alt+right",
        "command": "breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+left",
        "command": "breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "escape",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.jump",
        "when": "inlineEditIsVisible && tabShouldJumpToInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        "key": "f3",
        "command": "list.find.replInputFocus",
        "when": "view == 'workbench.panel.repl.view'"
    },
    {
        "key": "alt+cmd+f",
        "command": "list.find.replInputFocus",
        "when": "view == 'workbench.panel.repl.view'"
    },
    {
        "key": "down",
        "command": "notebook.cell.nullAction",
        "when": "notebookOutputInputFocused"
    },
    {
        "key": "up",
        "command": "notebook.cell.nullAction",
        "when": "notebookOutputInputFocused"
    },
    {
        "key": "cmd+a",
        "command": "notebook.cell.output.selectAll",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+pageup",
        "command": "notebook.focusNextEditor",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused"
    },
    {
        "key": "ctrl+pageup",
        "command": "notebook.focusPreviousEditor",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused"
    },
    {
        "key": "cmd+/",
        "command": "terminalSuggestToggleExplainMode",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "cmd+r down",
        "command": "views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+r left",
        "command": "views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+r right",
        "command": "views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+r up",
        "command": "views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.debug.nextConsole",
        "when": "inDebugRepl"
    },
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.debug.prevConsole",
        "when": "inDebugRepl"
    },
    {
        "key": "tab",
        "command": "workbench.action.terminal.acceptSelectedSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "enter",
        "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'"
    },
    {
        "key": "cmd+k",
        "command": "workbench.action.terminal.clear",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.hideSuggestWidget",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "shift+cmd+o",
        "command": "workbench.action.terminal.openDetectedLink",
        "when": "terminalFocus && terminalHasBeenCreated"
    },
    {
        "key": "shift+cmd+g",
        "command": "workbench.action.terminal.openDetectedLink",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+space",
        "command": "workbench.action.terminal.requestCompletions",
        "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalProcessSupported && !terminalSuggestWidgetVisible"
    },
    {
        "key": "pagedown",
        "command": "workbench.action.terminal.selectNextPageSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "workbench.action.terminal.selectNextSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "pageup",
        "command": "workbench.action.terminal.selectPrevPageSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "workbench.action.terminal.selectPrevSuggestion",
        "when": "simpleSuggestWidgetHasNavigated && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasNavigated && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible || terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && !config.terminal.integrated.suggest.upArrowNavigatesHistory || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && !config.terminal.integrated.suggest.upArrowNavigatesHistory"
    },
    {
        "key": "cmd+k",
        "command": "workbench.debug.panel.action.clearReplAction",
        "when": "focusedView == 'workbench.panel.repl.view'"
    },
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inInlineEditsPreviewEditor"
    },
    {
        "key": "f6",
        "command": "workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "alt+down",
        "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "alt+up",
        "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "up",
        "command": "workbench.action.terminal.hideSuggestWidgetAndNavigateHistory",
        "when": "config.terminal.integrated.suggest.upArrowNavigatesHistory && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && !simpleSuggestWidgetHasNavigated || config.terminal.integrated.suggest.upArrowNavigatesHistory && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && !simpleSuggestWidgetHasNavigated"
    },
    {
        "key": "enter",
        "command": "debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "enter",
        "command": "debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "space",
        "command": "debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "cmd+up",
        "command": "interactive.history.focus",
        "when": "isCompositeNotebook && !notebookEditorFocused && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "cmd+down",
        "command": "interactive.input.focus",
        "when": "isCompositeNotebook && notebookEditorFocused"
    },
    {
        "key": "escape",
        "command": "notebook.cell.quitEdit",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "alt+home alt+home",
        "command": "repl.input.focus",
        "when": "mostRecentReplEditor"
    },
    {
        "key": "cmd+v",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "composer.toggleFindCaseSensitive",
        "when": "composerFindWidgetFocused"
    },
    {
        "key": "alt+cmd+r",
        "command": "composer.toggleFindRegex",
        "when": "composerFindWidgetFocused"
    },
    {
        "key": "alt+cmd+w",
        "command": "composer.toggleFindWholeWord",
        "when": "composerFindWidgetFocused"
    },
    {
        "key": "alt+cmd+backspace",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !inputFocus"
    },
    {
        "key": "shift+cmd+.",
        "command": "editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "shift+cmd+o",
        "command": "editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "cmd+e",
        "command": "editor.action.toggleScreenReaderAccessibilityMode",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "shift+alt+f1",
        "command": "editor.action.toggleScreenReaderAccessibilityMode"
    },
    {
        "key": "escape",
        "command": "editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "editor.closeTypeHierarchy",
        "when": "typeHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "cmd+down",
        "command": "explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "escape",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "cmd+c",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "cmd+x",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "space",
        "command": "filesExplorer.openFilePreserveFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "home",
        "command": "firstCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "end",
        "command": "lastCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "right",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "left",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "remote.tunnel.closeInline",
        "when": "tunnelCloseable && tunnelViewFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "remote.tunnel.closeInline",
        "when": "tunnelCloseable && tunnelViewFocus"
    },
    {
        "key": "cmd+c",
        "command": "remote.tunnel.copyAddressInline",
        "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
    },
    {
        "key": "enter",
        "command": "remote.tunnel.label",
        "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
    },
    {
        "key": "enter",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f5",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f11",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+escape",
        "command": "closeReferenceSearch",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
    },
    {
        "key": "cmd+up",
        "command": "list.stickyScroll.collapse",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "left",
        "command": "list.stickyScroll.collapse",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "cmd+down",
        "command": "list.stickyScrollselect",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "list.stickyScrollselect",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "space",
        "command": "list.stickyScrolltoggleExpand",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "escape",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+alt+cmd+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+cmd+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "cmd+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "right",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "shift+cmd+p",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+q",
        "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "shift+cmd+r",
        "command": "workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "alt+cmd+i",
        "command": "workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "escape",
        "command": "workbench.action.chat.stopListening",
        "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
    },
    {
        "key": "escape",
        "command": "workbench.action.chat.stopReadChatItemAloud",
        "when": "scopedChatSynthesisInProgress"
    },
    {
        "key": "escape",
        "command": "workbench.action.editorDictation.stop",
        "when": "editorDictation.inProgress"
    },
    {
        "key": "escape",
        "command": "workbench.action.speech.stopReadAloud",
        "when": "scopedChatSynthesisInProgress && textToSpeechInProgress"
    },
    {
        "key": "f10",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "cmd+k alt+cmd+s",
        "command": "git.stageSelectedRanges",
        "when": "editorTextFocus && !operationInProgress && resourceScheme == 'file'"
    },
    {
        "key": "shift+cmd+v",
        "command": "markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+f12",
        "command": "references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "f11",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "cmd+k cmd+n",
        "command": "git.unstageSelectedRanges",
        "when": "editorTextFocus && isInDiffEditor && isInDiffRightEditor && !operationInProgress && resourceScheme == 'git'"
    },
    {
        "key": "cmd+k v",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "f4",
        "command": "references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "cmd+k cmd+r",
        "command": "git.revertSelectedRanges",
        "when": "editorTextFocus && !operationInProgress && resourceScheme == 'file'"
    },
    {
        "key": "shift+f4",
        "command": "references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+alt+h",
        "command": "references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "alt+o",
        "command": "C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)"
    },
    {
        "key": "cmd+f",
        "command": "aiSettings.action.focusSearch",
        "when": "isSettingsPaneFocused"
    },
    {
        "key": "shift+cmd+j",
        "command": "aiSettings.action.open",
        "when": "!isSettingsPaneOpen"
    },
    {
        "key": "shift+cmd+0",
        "command": "aiSettings.usingOpenAIKey.toggle"
    },
    {
        "key": "alt+,",
        "command": "gitlens.key.alt+,",
        "when": "gitlens:key:,"
    },
    {
        "key": "cmd+b",
        "command": "markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "shift+alt+p",
        "command": "openapi.preview",
        "when": "editorTextFocus && !openapiErrors"
    },
    {
        "key": "shift+enter",
        "command": "python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+cmd+r",
        "command": "reactSnippets.search",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "rest-client.request",
        "when": "editorTextFocus && editorLangId == 'http'"
    },
    {
        "key": "ctrl+shift+u",
        "command": "rust-analyzer.parentModule",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "cmd+i",
        "command": "workbench.action.terminal.chat.start",
        "when": "chatIsEnabled && terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || chatIsEnabled && terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "ctrl+enter",
        "command": "chat.inlineResourceAnchor.openToSide",
        "when": "chatAttachmentResource"
    },
    {
        "key": "ctrl+shift+r ctrl+i",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)",
        "args": {
            "kind": "refactor.inline.macro",
            "apply": "first"
        }
    },
    {
        "key": "alt+.",
        "command": "gitlens.key.alt+.",
        "when": "gitlens:key:."
    },
    {
        "key": "cmd+i",
        "command": "markdown.extension.editing.toggleItalic",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "shift+enter",
        "command": "python.execInREPL",
        "when": "config.python.REPL.sendToNativeREPL && editorTextFocus && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && editorLangId == 'python'"
    },
    {
        "key": "alt+cmd+r",
        "command": "rest-client.request",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "rust-analyzer.joinLines",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "cmd+i",
        "command": "workbench.action.terminal.suggestToggleDetails",
        "when": "simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "ctrl+space",
        "command": "workbench.action.terminal.suggestToggleDetails",
        "when": "simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "ctrl+shift+r ctrl+e",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)",
        "args": {
            "kind": "refactor.extract.function",
            "apply": "first"
        }
    },
    {
        "key": "alt+enter",
        "command": "gitlens.key.alt+enter",
        "when": "gitlens:key:alt+enter"
    },
    {
        "key": "alt+s",
        "command": "markdown.extension.editing.toggleStrikethrough",
        "when": "false"
    },
    {
        "key": "enter",
        "command": "python.execInREPLEnter",
        "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
    },
    {
        "key": "alt+cmd+l",
        "command": "rest-client.rerun-last-request",
        "when": "editorTextFocus && editorLangId == 'http'"
    },
    {
        "key": "alt+left",
        "command": "gitlens.key.alt+left",
        "when": "gitlens:key:alt+left"
    },
    {
        "key": "ctrl+shift+]",
        "command": "markdown.extension.editing.toggleHeadingUp",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "enter",
        "command": "python.execInInteractiveWindowEnter",
        "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "alt+cmd+l",
        "command": "rest-client.rerun-last-request",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "alt+right",
        "command": "gitlens.key.alt+right",
        "when": "gitlens:key:alt+right"
    },
    {
        "key": "ctrl+shift+[",
        "command": "markdown.extension.editing.toggleHeadingDown",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+l",
        "command": "rest-client.rerun-last-request",
        "when": "httpResponsePreviewFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "gitlens.key.ctrl+enter",
        "when": "gitlens:key:ctrl+enter"
    },
    {
        "key": "cmd+m",
        "command": "markdown.extension.editing.toggleMath",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+k",
        "command": "rest-client.cancel-request",
        "when": "editorTextFocus && editorLangId == 'http'"
    },
    {
        "key": "cmd+left",
        "command": "gitlens.key.ctrl+left",
        "when": "gitlens:key:ctrl+left"
    },
    // {
    //   "key": "enter",
    //   "command": "markdown.extension.onEnterKey",
    //   "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    // },
    {
        "key": "alt+cmd+k",
        "command": "rest-client.cancel-request",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "cmd+right",
        "command": "gitlens.key.ctrl+right",
        "when": "gitlens:key:ctrl+right"
    },
    {
        "key": "cmd+enter",
        "command": "markdown.extension.onCtrlEnterKey",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+h",
        "command": "rest-client.history"
    },
    {
        "key": "shift+enter",
        "command": "markdown.extension.onShiftEnterKey",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+e",
        "command": "rest-client.switch-environment"
    },
    {
        "key": "ctrl+shift+g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "shift+cmd+l",
        "command": "aichat.insertselectionintochat"
    },
    {
        "key": "cmd+y",
        "command": "aichat.newfollowupaction"
    },
    {
        "key": "alt+d",
        "command": "aidebug.autodebugterminal",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "composer.selectNextComposer",
        "when": "view =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "composer.selectPreviousComposer",
        "when": "view =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "escape",
        "command": "gitlens.key.escape",
        "when": "editorTextFocus && gitlens:key:escape && !codeActionMenuVisible && !findWidgetVisible && !isInEmbeddedEditor && !parameterHintsVisible && !quickFixWidgetVisible && !referenceSearchVisible && !renameInputVisible && !suggestWidgetVisible"
    },
    {
        "key": "tab",
        "command": "markdown.extension.onTabKey",
        "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !inlineSuggestionVisible && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && !tabShouldAcceptInlineEdit && !tabShouldJumpToInlineEdit && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+c",
        "command": "rest-client.generate-codesnippet",
        "when": "editorTextFocus && editorLangId == 'http'"
    },
    {
        "key": "left",
        "command": "gitlens.key.left",
        "when": "gitlens:key:left"
    },
    {
        "key": "shift+tab",
        "command": "markdown.extension.onShiftTabKey",
        "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+c",
        "command": "rest-client.generate-codesnippet",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "right",
        "command": "gitlens.key.right",
        "when": "gitlens:key:right"
    },
    // {
    //   "key": "backspace",
    //   "command": "markdown.extension.onBackspaceKey",
    //   "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    // },
    {
        "key": "alt+cmd+g shift+,",
        "command": "gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
    },
    {
        "key": "alt+up",
        "command": "markdown.extension.onMoveLineUp",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "shift+alt+,",
        "command": "gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && resource in 'gitlens:tabs:tracked'"
    },
    {
        "key": "alt+down",
        "command": "markdown.extension.onMoveLineDown",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+.",
        "command": "gitlens.diffWithNext:key",
        "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/"
    },
    {
        "key": "shift+alt+up",
        "command": "markdown.extension.onCopyLineUp",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+g .",
        "command": "gitlens.diffWithNext:key",
        "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
    },
    {
        "key": "shift+alt+down",
        "command": "markdown.extension.onCopyLineDown",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+,",
        "command": "gitlens.diffWithPrevious:key",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && resource in 'gitlens:tabs:tracked'"
    },
    {
        "key": "cmd+]",
        "command": "markdown.extension.onIndentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+g ,",
        "command": "gitlens.diffWithPrevious:key",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
    },
    {
        "key": "cmd+[",
        "command": "markdown.extension.onOutdentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "alt+cmd+g shift+.",
        "command": "gitlens.diffWithWorking:key",
        "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
    },
    {
        "key": "alt+c",
        "command": "markdown.extension.checkTaskList",
        "when": "false"
    },
    {
        "key": "shift+alt+.",
        "command": "gitlens.diffWithWorking:key",
        "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/"
    },
    {
        "key": "shift+cmd+v",
        "command": "markdown.extension.closePreview",
        "when": "activeWebviewPanelId == 'markdown.preview'"
    },
    {
        "key": "alt+/",
        "command": "gitlens.gitCommands",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "cmd+k v",
        "command": "markdown.extension.closePreview",
        "when": "activeWebviewPanelId == 'markdown.preview'"
    },
    {
        "key": "alt+cmd+g /",
        "commqand": "gitlens.gitCommands",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    // {
    //   "key": "cmd+v",
    //   "command": "markdown.extension.editing.paste",
    //   "when": "editorHasSelection && editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    // },
    {
        "key": "alt+c",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+cmd+g c",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+h",
        "command": "gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+cmd+g h",
        "command": "gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+cmd+g shift+h",
        "command": "gitlens.showQuickRepoHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "shift+alt+h",
        "command": "gitlens.showQuickRepoHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+s",
        "command": "gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+cmd+g s",
        "command": "gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+cmd+g shift+b",
        "command": "gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "shift+alt+b",
        "command": "gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+b",
        "command": "gitlens.toggleFileBlame:key",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && resource in 'gitlens:tabs:blameable'"
    },
    {
        "key": "alt+cmd+g b",
        "command": "gitlens.toggleFileBlame:key",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:blameable'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.branches.copy",
        "when": "focusedView == 'gitlens.views.branches'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.commits.copy",
        "when": "focusedView == 'gitlens.views.commits'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.contributors.copy",
        "when": "focusedView == 'gitlens.views.contributors'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.drafts.copy",
        "when": "focusedView == 'gitlens.views.drafts'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.fileHistory.copy",
        "when": "focusedView == 'gitlens.views.fileHistory'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.lineHistory.copy",
        "when": "focusedView == 'gitlens.views.lineHistory'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.pullRequest.copy",
        "when": "focusedView == 'gitlens.views.pullRequest'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.remotes.copy",
        "when": "focusedView == 'gitlens.views.remotes'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.repositories.copy",
        "when": "focusedView == 'gitlens.views.repositories'"
    },
    {
        "key": "3",
        "command": "gitlens.views.scm.grouped.branches",
        "when": "config.gitlens.views.scm.grouped.views.branches && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "1",
        "command": "gitlens.views.scm.grouped.commits",
        "when": "config.gitlens.views.scm.grouped.views.commits && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "7",
        "command": "gitlens.views.scm.grouped.contributors",
        "when": "config.gitlens.views.scm.grouped.views.contributors && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "8",
        "command": "gitlens.views.scm.grouped.fileHistory",
        "when": "config.gitlens.views.scm.grouped.views.fileHistory && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "9",
        "command": "gitlens.views.scm.grouped.launchpad",
        "when": "config.gitlens.views.scm.grouped.views.launchpad && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "4",
        "command": "gitlens.views.scm.grouped.remotes",
        "when": "config.gitlens.views.scm.grouped.views.remotes && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "0",
        "command": "gitlens.views.scm.grouped.searchAndCompare",
        "when": "config.gitlens.views.scm.grouped.views.searchAndCompare && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "5",
        "command": "gitlens.views.scm.grouped.stashes",
        "when": "config.gitlens.views.scm.grouped.views.stashes && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "6",
        "command": "gitlens.views.scm.grouped.tags",
        "when": "config.gitlens.views.scm.grouped.views.tags && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "2",
        "command": "gitlens.views.scm.grouped.worktrees",
        "when": "config.gitlens.views.scm.grouped.views.worktrees && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.searchAndCompare.copy",
        "when": "focusedView == 'gitlens.views.searchAndCompare'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.stashes.copy",
        "when": "focusedView == 'gitlens.views.stashes'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.tags.copy",
        "when": "focusedView == 'gitlens.views.tags'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.workspaces.copy",
        "when": "focusedView == 'gitlens.views.workspaces'"
    },
    {
        "key": "cmd+c",
        "command": "gitlens.views.worktrees.copy",
        "when": "focusedView == 'gitlens.views.worktrees'"
    },
    {
        "key": "cmd+l",
        "command": "aichat.newchataction"
    },
    {
        "key": "cmd+w",
        "command": "composer.closeComposerTab",
        "when": "composerFocused && !editorTextFocus || !editorTextFocus && focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "alt+cmd+'",
        "command": "composer.showComposerHistory"
    },
    {
        "key": "tab",
        "command": "editor.action.acceptCursorTabSuggestion",
        "when": "cpp.shouldAcceptTab"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.inlineDiffs.acceptAll",
        "when": "editorTextFocus && @inlineDiffs.acceptAllEdits.isActiveEditorWithDiffs"
    },
    {
        "key": "shift+cmd+y",
        "command": "editor.action.inlineDiffs.acceptPartialEdit",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "cmd+y",
        "command": "editor.action.inlineDiffs.acceptPartialEdit",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "cmd+y",
        "command": "editor.action.inlineDiffs.acceptPartialEdit",
        "when": "editorTextFocus && @inlineDiffs.acceptPartialEdit.isActiveEditorWithDiffs"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "editor.action.inlineDiffs.rejectAll",
        "when": "editorTextFocus && @inlineDiffs.rejectAllEdits.isActiveEditorWithDiffs"
    },
    {
        "key": "cmd+ctrl",
        "command": "editor.action.inlineDiffs.rejectAllAcrossAllEditors",
        "when": "editorHasPromptBar && editorTextFocus || editorTextFocus && hasDisplayedDiff"
    },
    {
        "key": "cmd+ctrl",
        "command": "editor.action.inlineDiffs.rejectAllAcrossAllEditors",
        "when": "editorHasPromptBar && editorTextFocus || editorTextFocus && hasDisplayedDiff"
    },
    {
        "key": "cmd+n",
        "command": "editor.action.inlineDiffs.rejectPartialEdit",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "cmd+n",
        "command": "editor.action.inlineDiffs.rejectPartialEdit",
        "when": "editorTextFocus && @inlineDiffs.rejectPartialEdit.isActiveEditorWithDiffs"
    },
    {
        "key": "cmd+escape",
        "command": "workbench.action.backgroundComposer.escapeToClose",
        "when": "backgroundComposerEnabled && isInBackgroundComposerWindow"
    },
    {
        "key": "alt+cmd+z",
        "command": "workbench.action.backgroundComposer.toggleControlPanelExpand",
        "when": "backgroundComposerEnabled"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "composer.cancelComposerStep",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "ctrl+c",
        "command": "composer.cancelComposerStepInputFocused",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "shift+backspace",
        "command": "composer.cancelTerminalToolCall",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "cmd+t",
        "command": "composer.createNewComposerTab",
        "when": "composerFocused || activeEditor == 'workbench.editor.composer' || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "cmd+n",
        "command": "composer.createNewWithPrevContext",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "alt+cmd+.",
        "command": "composer.openModeMenu",
        "when": "chatModeMenuFocused && !editorTextFocus || composerFocused && !editorTextFocus"
    },
    {
        "key": "cmd+.",
        "command": "composer.openModeMenu",
        "when": "chatModeMenuFocused && !editorTextFocus || composerFocused && !editorTextFocus"
    },
    {
        "key": "cmd+l",
        "command": "composer.sendToAgent",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "cmd+f",
        "command": "composer.showFind",
        "when": "composerFindWidgetFocused && !editorTextFocus || composerFocused && !editorTextFocus || !editorTextFocus && focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "cmd+i",
        "command": "composer.toggleAllVsSingleChatContext",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "cmd+d",
        "command": "composer.toggleChatAsEditor",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "editor.action.inlineDiffs.cancelEdits",
        "when": "editorTextFocus && hasActivelyGeneratingDiff"
    },
    {
        "key": "cmd+.",
        "command": "workbench.action.backgroundComposer.togglePeekContentTab",
        "when": "backgroundComposerEnabled && isBackgroundComposerPeekContentActive"
    },
    {
        "key": "cmd+.",
        "command": "acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "enter",
        "command": "acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "alt+l",
        "command": "editor.action.inlineDiffs.nextDiffFile",
        "when": "editorTextFocus && @inlineDiffs.nextDiffFile.hasInlineDiffsInAnyEditor"
    },
    {
        "key": "alt+h",
        "command": "editor.action.inlineDiffs.previousDiffFile",
        "when": "editorTextFocus && @inlineDiffs.previousDiffFile.hasInlineDiffsInAnyEditor"
    },
    {
        "key": "cmd+g",
        "command": "editor.action.simpleInlineDiffs.acceptAll",
        "when": "editorTextFocus && hasDisplayedSimpleDiff"
    },
    {
        "key": "cmd+h",
        "command": "editor.action.simpleInlineDiffs.rejectAll",
        "when": "editorTextFocus && hasDisplayedSimpleDiff"
    },
    {
        "key": "shift+escape",
        "command": "hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "escape",
        "command": "hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "cmd+enter",
        "command": "previewSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "cmd+down",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "down",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "cmd+up",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "up",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "shift+cmd+d",
        "command": "composer.fixerrormessage",
        "when": "!chatModeMenuFocused && !composerFocused && @composer.isCursorOnLint"
    },
    {
        "key": "shift+cmd+k",
        "command": "aipopup.action.modal.generate",
        "when": "editorFocus && !composerBarIsVisible",
        "args": {
            "invocationType": "toggle"
        }
    },
    {
        "key": "cmd+k g",
        "command": "aipopup.action.modal.generate",
        "when": "editorFocus && !composerBarIsVisible"
    },
    {
        "key": "cmd+k",
        "command": "-aipopup.action.modal.generate",
        "when": "editorFocus && !composerBarIsVisible"
    },
    {
        "key": "shift+cmd+k",
        "command": "editor.action.inlineDiffs.focusEditor",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "cmd+k",
        "command": "editor.action.inlineDiffs.focusEditor",
        "when": "editorHasPromptBar && editorPromptBarFocused"
    },
    {
        "key": "shift+cmd+i",
        "command": "composer.newAgentChat"
    },
    {
        "key": "cmd+i",
        "command": "composer.startComposerPrompt"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "editor.action.inlineDiffs.cancelPromptBar",
        "when": "editorTextFocus && hasActivelyGeneratingPromptBarDiff"
    },
    {
        "key": "escape",
        "command": "aipopup.action.closePromptBar",
        "when": "editorHasPromptBar && editorPromptBarFocused && editorTextFocus"
    },
    {
        "key": "escape",
        "command": "diffEditor.exitCompareMove",
        "when": "comparingMovedCode"
    },
    {
        "key": "cmd+enter",
        "command": "cursorai.action.acceptGenerateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && @terminal.acceptPromptBarEnabled"
    },
    {
        "key": "cmd+backspace",
        "command": "cursorai.action.cancelGenerateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && @terminal.canCancelGeneration"
    },
    {
        "key": "cmd+k",
        "command": "cursorai.action.generateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalPromptBarVisible || terminalProcessSupported && terminalPromptBarVisible"
    },
    {
        "key": "escape",
        "command": "cursorai.action.hideGenerateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && @terminal.promptBarVisible"
    },
    {
        "key": "cmd+enter",
        "command": "cursorai.action.acceptAndRunGenerateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && @terminal.acceptAndRunPromptBarEnabled"
    },
    {
        "key": "cmd+backspace",
        "command": "cursorai.action.rejectGenerateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && @terminal.canRejectGeneration"
    },
    {
        "key": "cmd+k cmd+p",
        "command": "workbench.profiles.actions.switchProfile"
    },
    {
        "key": "cmd+k d",
        "command": "editor.cpp.disableenabled"
    },
    {
        "key": "cmd+k e",
        "command": "editor.action.enableCppGlobally"
    }
]
// Here are other available commands:
// - C_Cpp.AddDebugConfiguration
// - C_Cpp.BuildAndDebugFile
// - C_Cpp.BuildAndRunFile
// - C_Cpp.ConfigurationEditJSON
// - C_Cpp.ConfigurationEditUI
// - C_Cpp.ConfigurationProviderSelect
// - C_Cpp.ConfigurationSelect
// - C_Cpp.CreateDeclarationOrDefinition
// - C_Cpp.DisableErrorSquiggles
// - C_Cpp.EnableErrorSquiggles
// - C_Cpp.GenerateDoxygenComment
// - C_Cpp.GenerateEditorConfig
// - C_Cpp.GoToNextDirectiveInGroup
// - C_Cpp.GoToPrevDirectiveInGroup
// - C_Cpp.InstallCompiler
// - C_Cpp.LogDiagnostics
// - C_Cpp.RemoveAllCodeAnalysisProblems
// - C_Cpp.RescanCompilers
// - C_Cpp.RescanWorkspace
// - C_Cpp.ResetDatabase
// - C_Cpp.RestartIntelliSenseForFile
// - C_Cpp.RunCodeAnalysisOnActiveFile
// - C_Cpp.RunCodeAnalysisOnAllFiles
// - C_Cpp.RunCodeAnalysisOnOpenFiles
// - C_Cpp.SelectIntelliSenseConfiguration
// - C_Cpp.TakeSurvey
// - C_Cpp.ToggleDimInactiveRegions
// - C_Cpp.VcpkgClipboardInstallSuggested
// - C_Cpp.VcpkgOnlineHelpSuggested
// - C_Cpp.activeSshTarget
// - C_Cpp.addSshTarget
// - C_Cpp.referencesViewGroupByType
// - C_Cpp.referencesViewUngroupByType
// - C_Cpp.refreshCppSshTargetsView
// - C_Cpp.removeSshTarget
// - C_Cpp.selectActiveSshTarget
// - C_Cpp.selectSshTarget
// - C_Cpp.setActiveSshTarget
// - C_Cpp.sshTerminal
// - CppReferencesView.focus
// - CppReferencesView.resetViewLocation
// - CppSshTargetsView.focus
// - CppSshTargetsView.resetViewLocation
// - acceptSelectedSuggestionOnEnter
// - acceptSnippet
// - accessibility.announcement.help
// - addRootFolder
// - aiEditorBox.goToDefinition
// - aiFeedback.action.reportBugs
// - aiFeedback.action.reportFeedback
// - aiServerConfigService.forceRefresh
// - aiServerConfigService.getCachedServerConfig
// - aichat.action.goToDefinitionFromChatResponse
// - aichat.close-sidebar
// - aipopup.action.acceptPromptBar
// - aipopup.action.cancelPromptBar
// - aipopup.action.cmdKRemoveFollowup
// - aipopup.action.createInBackground
// - aipopup.action.focusEdit
// - aipopup.action.insertEditSelection
// - aipopup.action.nextPromptBar
// - aipopup.action.rejectPromptBar
// - authentication.command.anysphere.signOut
// - black-formatter.restart
// - breadcrumbs.toggle
// - breadcrumbs.toggleFromEditorTitle
// - callStack.collapse
// - callStackWidget.goToFile
// - changeEditorIndentation2
// - chat.inlineResourceAnchor.addFileToChat
// - chat.inlineSymbolAnchor.goToDefinition
// - chat.inlineSymbolAnchor.goToImplementations
// - chat.inlineSymbolAnchor.goToReferences
// - chat.inlineSymbolAnchor.goToTypeDefinitions
// - chat.openCursorSettings
// - chat.openFileSnapshot
// - chat.openFileUpdatedBySnapshot
// - chatEditing.acceptFile
// - chatEditing.clearWorkingSet
// - chatEditing.discardFile
// - chatEditing.openFileInDiff
// - chatEditing.removeFileFromWorkingSet
// - chatEditing.viewChanges
// - cleanSearchEditorState
// - closeReferenceSearchEditor
// - cmdK.clearPromptBar
// - cmdK.resolveConflictInCmdK
// - codelens.showLensesInCurrentLine
// - columnSelect
// - comments.collapse
// - comments.expand
// - comments.reply
// - compareFiles
// - compareSelected
// - composer.addfilestocomposer
// - composer.addfilestonnewcomposer
// - composer.addsymbolstocomposer
// - composer.addsymbolstonewcomposer
// - composer.cancelChat
// - composer.clearComposerTabs
// - composer.closeOtherComposerTabs
// - composer.copyRequestId
// - composer.createNew
// - composer.createNewBackgroundAgent
// - composer.duplicateChat
// - composer.exportChatAsMd
// - composer.getBackgroundComposerInfo
// - composer.getComposerHandleById
// - composer.getCurrentWorkspaceRepoUrl
// - composer.getOrderedSelectedComposerIds
// - composer.handleBugBotDeeplink
// - composer.openAsPane
// - composer.openChatAsEditor
// - composer.openChatMultiDiffEditor
// - composer.openComposer
// - composer.reapplyCodeblock
// - composer.refundLastRequest
// - composer.reportFeedback
// - composer.resetMode
// - composer.resolveAllConflictsInChat
// - composer.resumeCurrentChat
// - composer.showBackgroundAgentRepositoryMismatchDialog
// - composer.showComposerHistoryEditor
// - composer.splitEditorWithNewComposer
// - composer.startComposerPrompt2
// - composer.updateStatus
// - composer.updateSummaryIfOutdated
// - composer.updateTitle
// - composerMode.agent
// - composerMode.background
// - composerMode.chat
// - compositionEnd
// - compositionStart
// - compositionType
// - createCursor
// - cursor-deeplink.debug.triggerDeeplink
// - cursor.checkOkToIndexLink
// - cursor.checkonupdate
// - cursor.doupdate
// - cursor.generateGitCommitMessage
// - cursor.giveFeedback
// - cursor.mentionLinkToolbar
// - cursor.newdocs
// - cursor.publicLogCapture
// - cursor.removevim
// - cursor.showTooltipActionId
// - cursor.startOnboarding
// - cursorAuth.triggerTokenRefresh
// - cursorRedo
// - cursorWordEndLeft
// - cursorWordEndLeftSelect
// - cursorWordPartStartLeft
// - cursorWordPartStartLeftSelect
// - cursorWordRight
// - cursorWordRightSelect
// - cursorWordStartLeft
// - cursorWordStartLeftSelect
// - cursorWordStartRight
// - cursorWordStartRightSelect
// - cursorai.action.addModelToSwitcher
// - cursorai.action.askToEnableShadowWorkspace
// - cursorai.action.cppAfterOnboarding
// - cursorai.action.disableFallbackModels
// - cursorai.action.hideNotificationsForMs
// - cursorai.action.importvscode
// - cursorai.action.incrementShownModelFallbacksWarningCount
// - cursorai.action.openAccountSettings
// - cursorai.action.repo.indexMainRepository
// - cursorai.action.reportBadAIAction
// - cursorai.action.reportBadCmdK
// - cursorai.action.reportGoodAIAction
// - cursorai.action.reportGoodCmdK
// - cursorai.action.setQueryOnlyIndex
// - cursorai.action.setWindowInWindowCollapsed
// - cursorai.action.setWindowInWindowExpanded
// - cursorai.action.showUsagePricingModal
// - cursorai.action.switchToModel
// - cursorai.action.windowInWindowDidHide
// - cursorai.action.windowInWindowDidShow
// - cursorai.action.windowInWindowReloadIfRemoteHostDead
// - cursorai.action.windowInWindowSetZoomLevel
// - cursorpyright.dumpCachedTypes
// - cursorpyright.dumpCodeFlowGraph
// - cursorpyright.dumpNodes
// - cursorpyright.dumpTokens
// - cursorpyright.dumpTypes
// - cursorpyright.importPylanceSettings
// - cursorpyright.organizeimports
// - cursorpyright.restartserver
// - cursorpyright.writeBaseline
// - cut
// - debug.action.openDisassemblyView
// - debug.action.toggleDisassemblyViewSourceCode
// - debug.addConfiguration
// - debug.addToWatchExpressions
// - debug.breakWhenValueChanges
// - debug.breakWhenValueIsAccessed
// - debug.breakWhenValueIsRead
// - debug.collapseRepl
// - debug.copyEvaluatePath
// - debug.copyStackTrace
// - debug.editBreakpoint
// - debug.editBreakpointMode
// - debug.editFunctionBreakpoint
// - debug.editFunctionBreakpointHitCount
// - debug.enableOrDisableBreakpoint
// - debug.installAdditionalDebuggers
// - debug.jumpToCursor
// - debug.replCopy
// - debug.replPaste
// - debug.setWatchExpression
// - debug.startFromConfig
// - debug.toggleReplIgnoreFocus
// - debugpy.clearCacheAndReload
// - debugpy.debugInTerminal
// - debugpy.debugUsingLaunchConfig
// - debugpy.reportIssue
// - debugpy.viewOutput
// - default:compositionEnd
// - default:compositionStart
// - default:compositionType
// - default:cut
// - default:paste
// - default:redo
// - default:replacePreviousChar
// - default:type
// - default:undo
// - deleteInsideWord
// - deleteWordEndLeft
// - deleteWordEndRight
// - deleteWordStartLeft
// - deleteWordStartRight
// - detailsContainers.focus
// - detailsContainers.resetViewLocation
// - devVolumes.focus
// - devVolumes.resetViewLocation
// - developer.captureAndUploadRendererHeapSnapshot
// - developer.showCurrentFileAsReleaseNotes
// - diffEditor.collapseAllUnchangedRegions
// - diffEditor.revert
// - diffEditor.showAllUnchangedRegions
// - diffEditor.switchSide
// - diffEditor.toggleCollapseUnchangedRegions
// - diffEditor.toggleShowMovedCodeBlocks
// - diffEditor.toggleUseInlineViewWhenSpaceIsLimited
// - editor.action.acceptCppSuggestion
// - editor.action.addCursorsToBottom
// - editor.action.addCursorsToTop
// - editor.action.addSelectionToPreviousFindMatch
// - editor.action.addSymbolToChat
// - editor.action.addSymbolToNewChat
// - editor.action.changeTabDisplaySize
// - editor.action.clipboardCopyWithSyntaxHighlightingAction
// - editor.action.configureCppDiffPeekView
// - editor.action.debugEditorGpuRenderer
// - editor.action.decreaseHoverVerbosityLevel
// - editor.action.detectIndentation
// - editor.action.diffReview.next
// - editor.action.diffReview.prev
// - editor.action.duplicateSelection
// - editor.action.enableCppGlobally
// - editor.action.findReferences
// - editor.action.fixAll
// - editor.action.focusNextCursor
// - editor.action.focusPreviousCursor
// - editor.action.focusStickyScroll
// - editor.action.fontZoomIn
// - editor.action.fontZoomOut
// - editor.action.fontZoomReset
// - editor.action.forceRetokenize
// - editor.action.format
// - editor.action.formatChanges
// - editor.action.formatDocument.multiple
// - editor.action.formatSelection.multiple
// - editor.action.goToDeclaration
// - editor.action.goToMatchFindAction
// - editor.action.goToSelectionAnchor
// - editor.action.goToTypeDefinition
// - editor.action.hideHover
// - editor.action.increaseHoverVerbosityLevel
// - editor.action.indentUsingSpaces
// - editor.action.indentUsingTabs
// - editor.action.indentationToSpaces
// - editor.action.indentationToTabs
// - editor.action.inlineDiffs.submitFix
// - editor.action.inlineDiffs.viewAllChanges
// - editor.action.inlineSuggest.acceptNextInlineEditPart
// - editor.action.inlineSuggest.acceptNextLine
// - editor.action.inlineSuggest.dev.extractRepro
// - editor.action.inlineSuggest.toggleAlwaysShowToolbar
// - editor.action.inlineSuggest.toggleShowCollapsed
// - editor.action.inlineSuggest.trigger
// - editor.action.inlineSuggest.triggerInlineEdit
// - editor.action.inlineSuggest.triggerInlineEditExplicit
// - editor.action.insertFinalNewLine
// - editor.action.insertSnippet
// - editor.action.inspectTMScopes
// - editor.action.knowledgeBase.add
// - editor.action.knowledgeBase.list
// - editor.action.measureExtHostLatency
// - editor.action.moveCarretLeftAction
// - editor.action.moveCarretRightAction
// - editor.action.moveSelectionToPreviousFindMatch
// - editor.action.openDeclarationToTheSide
// - editor.action.openLink
// - editor.action.pasteAs
// - editor.action.pasteAsText
// - editor.action.peekDeclaration
// - editor.action.peekTypeDefinition
// - editor.action.previewDeclaration
// - editor.action.redoLexical
// - editor.action.referenceSearch.trigger
// - editor.action.reindentlines
// - editor.action.reindentselectedlines
// - editor.action.removeDuplicateLines
// - editor.action.renderViewZone
// - editor.action.resetSuggestSize
// - editor.action.resizePromptBar
// - editor.action.revealDeclaration
// - editor.action.selectToBracket
// - editor.action.setCppDiffPeekView
// - editor.action.showDefinitionPreviewHover
// - editor.action.showOrFocusStandaloneColorPicker
// - editor.action.showReferences
// - editor.action.showSnippets
// - editor.action.smartSelect.grow
// - editor.action.sortLinesAscending
// - editor.action.sortLinesDescending
// - editor.action.sourceAction
// - editor.action.startDebugTextMate
// - editor.action.surroundWithSnippet
// - editor.action.toggleColumnSelection
// - editor.action.toggleMinimap
// - editor.action.toggleRenderControlCharacter
// - editor.action.toggleRenderWhitespace
// - editor.action.toggleStickyScroll
// - editor.action.transformToCamelcase
// - editor.action.transformToKebabcase
// - editor.action.transformToLowercase
// - editor.action.transformToPascalcase
// - editor.action.transformToSnakecase
// - editor.action.transformToTitlecase
// - editor.action.transformToUppercase
// - editor.action.transpose
// - editor.action.undoLexical
// - editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters
// - editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters
// - editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters
// - editor.action.unicodeHighlight.showExcludeOptions
// - editor.action.updateGhostText
// - editor.action.updateHintLine
// - editor.action.wordHighlight.trigger
// - editor.actions.findWithArgs
// - editor.controlCommon.acceptSuggestion
// - editor.cpp.disableenabled
// - editor.cpp.login
// - editor.cpp.openPro
// - editor.cpp.snooze
// - editor.cpp.toggle
// - editor.cpp.unsnooze
// - editor.debug.action.addLogPoint
// - editor.debug.action.conditionalBreakpoint
// - editor.debug.action.editBreakpoint
// - editor.debug.action.goToNextBreakpoint
// - editor.debug.action.goToPreviousBreakpoint
// - editor.debug.action.runToCursor
// - editor.debug.action.selectionToRepl
// - editor.debug.action.selectionToWatch
// - editor.debug.action.stepIntoTargets
// - editor.debug.action.triggerByBreakpoint
// - editor.emmet.action.balanceIn
// - editor.emmet.action.balanceOut
// - editor.emmet.action.decrementNumberByOne
// - editor.emmet.action.decrementNumberByOneTenth
// - editor.emmet.action.decrementNumberByTen
// - editor.emmet.action.evaluateMathExpression
// - editor.emmet.action.incrementNumberByOne
// - editor.emmet.action.incrementNumberByOneTenth
// - editor.emmet.action.incrementNumberByTen
// - editor.emmet.action.matchTag
// - editor.emmet.action.mergeLines
// - editor.emmet.action.nextEditPoint
// - editor.emmet.action.prevEditPoint
// - editor.emmet.action.reflectCSSValue
// - editor.emmet.action.removeTag
// - editor.emmet.action.selectNextItem
// - editor.emmet.action.selectPrevItem
// - editor.emmet.action.splitJoinTag
// - editor.emmet.action.toggleComment
// - editor.emmet.action.updateImageSize
// - editor.emmet.action.updateTag
// - editor.emmet.action.wrapWithAbbreviation
// - editor.gotoNextFold
// - editor.gotoParentFold
// - editor.gotoPreviousFold
// - editor.inlayHints.Reset
// - editor.showTypeHierarchy
// - editor.toggleImportFold
// - eslint.createConfig
// - eslint.executeAutofix
// - eslint.migrateSettings
// - eslint.restart
// - eslint.revalidate
// - eslint.showOutputChannel
// - explorer.download
// - explorer.newFile
// - explorer.newFolder
// - explorer.openWith
// - explorer.upload
// - extension.bisect.next
// - extension.bisect.start
// - extension.bisect.stop
// - extension.js-debug.addCustomBreakpoints
// - extension.js-debug.addXHRBreakpoints
// - extension.js-debug.callers.add
// - extension.js-debug.callers.goToCaller
// - extension.js-debug.callers.gotToTarget
// - extension.js-debug.callers.remove
// - extension.js-debug.callers.removeAll
// - extension.js-debug.createDebuggerTerminal
// - extension.js-debug.createDiagnostics
// - extension.js-debug.debugLink
// - extension.js-debug.disableSourceMapStepping
// - extension.js-debug.editXHRBreakpoints
// - extension.js-debug.enableSourceMapStepping
// - extension.js-debug.getDiagnosticLogs
// - extension.js-debug.network.clear
// - extension.js-debug.network.copyUri
// - extension.js-debug.network.openBody
// - extension.js-debug.network.openBodyInHex
// - extension.js-debug.network.replayXHR
// - extension.js-debug.network.viewRequest
// - extension.js-debug.npmScript
// - extension.js-debug.openEdgeDevTools
// - extension.js-debug.prettyPrint
// - extension.js-debug.removeAllCustomBreakpoints
// - extension.js-debug.removeXHRBreakpoint
// - extension.js-debug.revealPage
// - extension.js-debug.startProfile
// - extension.js-debug.stopProfile
// - extension.js-debug.toggleSkippingFile
// - extension.jsProfileVisualizer.table.clearCodeLenses
// - extension.node-debug.toggleAutoAttach
// - extension.open
// - extension.pwa-node-debug.attachNodeProcess
// - extensions.actions.searchByCategory.AI
// - extensions.actions.searchByCategory.Azure
// - extensions.actions.searchByCategory.Chat
// - extensions.actions.searchByCategory.Data Science
// - extensions.actions.searchByCategory.Debuggers
// - extensions.actions.searchByCategory.Education
// - extensions.actions.searchByCategory.Extension Packs
// - extensions.actions.searchByCategory.Formatters
// - extensions.actions.searchByCategory.Keymaps
// - extensions.actions.searchByCategory.Language Packs
// - extensions.actions.searchByCategory.Linters
// - extensions.actions.searchByCategory.Machine Learning
// - extensions.actions.searchByCategory.Notebooks
// - extensions.actions.searchByCategory.Other
// - extensions.actions.searchByCategory.Programming Languages
// - extensions.actions.searchByCategory.SCM Providers
// - extensions.actions.searchByCategory.Snippets
// - extensions.actions.searchByCategory.Testing
// - extensions.actions.searchByCategory.Themes
// - extensions.actions.searchByCategory.Visualization
// - extensions.filter.featured
// - extensions.recommendedList.focus
// - extensions.recommendedList.resetViewLocation
// - extensions.sort.installs
// - extensions.sort.name
// - extensions.sort.publishedDate
// - extensions.sort.rating
// - extensions.sort.updateDate
// - exthost.action.toggleExtHostProfiler
// - files.openTimeline
// - files.participants.resetChoice
// - filesExplorer.findInWorkspace
// - focusAndAcceptSuggestion
// - getContextKeyInfo
// - git-base.api.getRemoteSources
// - git.acceptMerge
// - git.addRemote
// - git.api.getRemoteSources
// - git.api.getRepositories
// - git.api.getRepositoryState
// - git.blame.toggleEditorDecoration
// - git.blame.toggleStatusBarItem
// - git.branch
// - git.branchFrom
// - git.checkout
// - git.checkoutDetached
// - git.cherryPick
// - git.cherryPickAbort
// - git.clean
// - git.cleanAll
// - git.cleanAllTracked
// - git.cleanAllUntracked
// - git.clone
// - git.cloneRecursive
// - git.close
// - git.closeAllDiffEditors
// - git.closeAllUnmodifiedEditors
// - git.closeOtherRepositories
// - git.commit
// - git.commitAll
// - git.commitAllAmend
// - git.commitAllAmendNoVerify
// - git.commitAllNoVerify
// - git.commitAllSigned
// - git.commitAllSignedNoVerify
// - git.commitAmend
// - git.commitAmendNoVerify
// - git.commitEmpty
// - git.commitEmptyNoVerify
// - git.commitMessageAccept
// - git.commitMessageDiscard
// - git.commitNoVerify
// - git.commitSigned
// - git.commitSignedNoVerify
// - git.commitStaged
// - git.commitStagedAmend
// - git.commitStagedAmendNoVerify
// - git.commitStagedNoVerify
// - git.commitStagedSigned
// - git.commitStagedSignedNoVerify
// - git.continueInLocalClone
// - git.copyCommitId
// - git.copyCommitMessage
// - git.createTag
// - git.deleteBranch
// - git.deleteRemoteBranch
// - git.deleteRemoteTag
// - git.deleteTag
// - git.diff.stageHunk
// - git.diff.stageSelection
// - git.fetch
// - git.fetchAll
// - git.fetchPrune
// - git.fetchRef
// - git.graph.checkout
// - git.graph.checkoutDetached
// - git.graph.cherryPick
// - git.graph.deleteBranch
// - git.graph.deleteTag
// - git.ignore
// - git.init
// - git.manageUnsafeRepositories
// - git.merge
// - git.mergeAbort
// - git.openAllChanges
// - git.openChange
// - git.openFile
// - git.openFile2
// - git.openHEADFile
// - git.openMergeEditor
// - git.openRepositoriesInParentFolders
// - git.openRepository
// - git.publish
// - git.pull
// - git.pullFrom
// - git.pullRebase
// - git.pullRef
// - git.push
// - git.pushForce
// - git.pushRef
// - git.pushTags
// - git.pushTo
// - git.pushToForce
// - git.pushWithTags
// - git.pushWithTagsForce
// - git.rebase
// - git.rebaseAbort
// - git.refresh
// - git.removeRemote
// - git.rename
// - git.renameBranch
// - git.reopenClosedRepositories
// - git.resolveAllConflictsInChat
// - git.restoreCommitTemplate
// - git.revealFileInOS.linux
// - git.revealFileInOS.mac
// - git.revealFileInOS.windows
// - git.revealInExplorer
// - git.revertChange
// - git.runGitMerge
// - git.runGitMergeDiff3
// - git.showOutput
// - git.stage
// - git.stageAll
// - git.stageAllMerge
// - git.stageAllTracked
// - git.stageAllUntracked
// - git.stageChange
// - git.stageFile
// - git.stash
// - git.stashApply
// - git.stashApplyEditor
// - git.stashApplyLatest
// - git.stashDrop
// - git.stashDropAll
// - git.stashDropEditor
// - git.stashIncludeUntracked
// - git.stashPop
// - git.stashPopEditor
// - git.stashPopLatest
// - git.stashStaged
// - git.stashView
// - git.sync
// - git.syncRebase
// - git.timeline.compareWithSelected
// - git.timeline.copyCommitId
// - git.timeline.copyCommitMessage
// - git.timeline.openDiff
// - git.timeline.selectForCompare
// - git.timeline.viewCommit
// - git.undoCommit
// - git.unstage
// - git.unstageAll
// - git.unstageFile
// - git.viewChanges
// - git.viewCommit
// - git.viewStagedChanges
// - git.viewUntrackedChanges
// - github.copyVscodeDevLink
// - github.copyVscodeDevLinkFile
// - github.copyVscodeDevLinkWithoutRange
// - github.graph.openOnGitHub
// - github.openOnVscodeDev
// - github.publish
// - github.timeline.openOnGitHub
// - gitlens.addAuthors
// - gitlens.ai.explainBranch
// - gitlens.ai.explainBranch:graph
// - gitlens.ai.explainBranch:views
// - gitlens.ai.explainCommit
// - gitlens.ai.explainCommit:graph
// - gitlens.ai.explainCommit:views
// - gitlens.ai.explainStash
// - gitlens.ai.explainStash:graph
// - gitlens.ai.explainStash:views
// - gitlens.ai.explainWip
// - gitlens.ai.explainWip:graph
// - gitlens.ai.explainWip:views
// - gitlens.ai.feedback.helpful
// - gitlens.ai.feedback.helpful.chosen
// - gitlens.ai.feedback.unhelpful
// - gitlens.ai.feedback.unhelpful.chosen
// - gitlens.ai.generateChangelog
// - gitlens.ai.generateChangelog:views
// - gitlens.ai.generateChangelogFrom:graph
// - gitlens.ai.generateChangelogFrom:views
// - gitlens.ai.generateCommitMessage
// - gitlens.ai.generateCommitMessage:graph
// - gitlens.ai.generateCommitMessage:scm
// - gitlens.ai.generateRebase
// - gitlens.ai.rebaseOntoCommit:graph
// - gitlens.ai.rebaseOntoCommit:views
// - gitlens.ai.switchProvider
// - gitlens.ai.switchProvider:scm
// - gitlens.ai.undoGenerateRebase
// - gitlens.annotations.nextChange
// - gitlens.annotations.previousChange
// - gitlens.applyPatchFromClipboard
// - gitlens.associateIssueWithBranch
// - gitlens.browseRepoAtRevision
// - gitlens.browseRepoAtRevisionInNewWindow
// - gitlens.browseRepoBeforeRevision
// - gitlens.browseRepoBeforeRevisionInNewWindow
// - gitlens.changeBranchMergeTarget
// - gitlens.changeUpstream:graph
// - gitlens.changeUpstream:views
// - gitlens.clearFileAnnotations
// - gitlens.closeUnchangedFiles
// - gitlens.compareHeadWith
// - gitlens.compareWith
// - gitlens.compareWorkingWith
// - gitlens.composeCommits
// - gitlens.composeCommits:graph
// - gitlens.composeCommits:scm
// - gitlens.composeCommits:views
// - gitlens.composer.refresh
// - gitlens.computingFileAnnotations
// - gitlens.connectRemoteProvider
// - gitlens.copyCurrentBranch
// - gitlens.copyDeepLinkToBranch
// - gitlens.copyDeepLinkToCommit
// - gitlens.copyDeepLinkToComparison
// - gitlens.copyDeepLinkToFile
// - gitlens.copyDeepLinkToFileAtRevision
// - gitlens.copyDeepLinkToLines
// - gitlens.copyDeepLinkToRepo
// - gitlens.copyDeepLinkToTag
// - gitlens.copyDeepLinkToWorkspace
// - gitlens.copyMessageToClipboard
// - gitlens.copyPatchToClipboard
// - gitlens.copyPatchToClipboard:graph
// - gitlens.copyPatchToClipboard:scm
// - gitlens.copyPatchToClipboard:views
// - gitlens.copyRelativePathToClipboard
// - gitlens.copyRemoteBranchUrl
// - gitlens.copyRemoteBranchesUrl
// - gitlens.copyRemoteCommitUrl
// - gitlens.copyRemoteComparisonUrl
// - gitlens.copyRemoteFileUrlFrom
// - gitlens.copyRemoteFileUrlToClipboard
// - gitlens.copyRemoteFileUrlWithoutRange
// - gitlens.copyRemotePullRequestUrl
// - gitlens.copyRemoteRepositoryUrl
// - gitlens.copyShaToClipboard
// - gitlens.copyWorkingChangesToWorktree
// - gitlens.copyWorkingChangesToWorktree:views
// - gitlens.createCloudPatch
// - gitlens.createPatch
// - gitlens.createPullRequestOnRemote
// - gitlens.diffDirectory
// - gitlens.diffDirectoryWithHead
// - gitlens.diffFolderWithRevision
// - gitlens.diffFolderWithRevisionFrom
// - gitlens.diffLineWithWorking
// - gitlens.diffWithNext
// - gitlens.diffWithNext:editor/title
// - gitlens.diffWithPrevious
// - gitlens.diffWithPrevious:editor
// - gitlens.diffWithPrevious:editor/title
// - gitlens.diffWithPrevious:explorer
// - gitlens.diffWithRevision
// - gitlens.diffWithRevisionFrom
// - gitlens.diffWithWorking
// - gitlens.diffWithWorking:editor
// - gitlens.diffWithWorking:editor/title
// - gitlens.disableDebugLogging
// - gitlens.disableRebaseEditor
// - gitlens.disconnectRemoteProvider
// - gitlens.enableDebugLogging
// - gitlens.enableRebaseEditor
// - gitlens.externalDiff
// - gitlens.externalDiffAll
// - gitlens.fetchRepositories
// - gitlens.getStarted
// - gitlens.ghpr.views.openOrCreateWorktree
// - gitlens.gitCommands.branch
// - gitlens.gitCommands.branch.create
// - gitlens.gitCommands.branch.delete
// - gitlens.gitCommands.branch.prune
// - gitlens.gitCommands.branch.rename
// - gitlens.gitCommands.branch.upstream
// - gitlens.gitCommands.checkout
// - gitlens.gitCommands.cherryPick
// - gitlens.gitCommands.history
// - gitlens.gitCommands.merge
// - gitlens.gitCommands.rebase
// - gitlens.gitCommands.remote
// - gitlens.gitCommands.remote.add
// - gitlens.gitCommands.remote.prune
// - gitlens.gitCommands.remote.remove
// - gitlens.gitCommands.reset
// - gitlens.gitCommands.revert
// - gitlens.gitCommands.show
// - gitlens.gitCommands.stash
// - gitlens.gitCommands.stash.drop
// - gitlens.gitCommands.stash.list
// - gitlens.gitCommands.stash.pop
// - gitlens.gitCommands.stash.push
// - gitlens.gitCommands.stash.rename
// - gitlens.gitCommands.status
// - gitlens.gitCommands.switch
// - gitlens.gitCommands.tag
// - gitlens.gitCommands.tag.create
// - gitlens.gitCommands.tag.delete
// - gitlens.gitCommands.worktree
// - gitlens.gitCommands.worktree.create
// - gitlens.gitCommands.worktree.delete
// - gitlens.gitCommands.worktree.open
// - gitlens.gk.switchOrganization
// - gitlens.graph.addAuthor
// - gitlens.graph.associateIssueWithBranch
// - gitlens.graph.cherryPick
// - gitlens.graph.cherryPick.multi
// - gitlens.graph.columnAuthorOff
// - gitlens.graph.columnAuthorOn
// - gitlens.graph.columnChangesOff
// - gitlens.graph.columnChangesOn
// - gitlens.graph.columnDateTimeOff
// - gitlens.graph.columnDateTimeOn
// - gitlens.graph.columnGraphCompact
// - gitlens.graph.columnGraphDefault
// - gitlens.graph.columnGraphOff
// - gitlens.graph.columnGraphOn
// - gitlens.graph.columnMessageOff
// - gitlens.graph.columnMessageOn
// - gitlens.graph.columnRefOff
// - gitlens.graph.columnRefOn
// - gitlens.graph.columnShaOff
// - gitlens.graph.columnShaOn
// - gitlens.graph.commitViaSCM
// - gitlens.graph.compareAncestryWithWorking
// - gitlens.graph.compareBranchWithHead
// - gitlens.graph.compareSelectedCommits.multi
// - gitlens.graph.compareWithHead
// - gitlens.graph.compareWithMergeBase
// - gitlens.graph.compareWithUpstream
// - gitlens.graph.compareWithWorking
// - gitlens.graph.copy
// - gitlens.graph.copyDeepLinkToBranch
// - gitlens.graph.copyDeepLinkToCommit
// - gitlens.graph.copyDeepLinkToRepo
// - gitlens.graph.copyDeepLinkToTag
// - gitlens.graph.copyMessage
// - gitlens.graph.copyRemoteBranchUrl
// - gitlens.graph.copyRemoteCommitUrl
// - gitlens.graph.copyRemoteCommitUrl.multi
// - gitlens.graph.copySha
// - gitlens.graph.copyWorkingChangesToWorktree
// - gitlens.graph.createBranch
// - gitlens.graph.createCloudPatch
// - gitlens.graph.createPatch
// - gitlens.graph.createPullRequest
// - gitlens.graph.createTag
// - gitlens.graph.createWorktree
// - gitlens.graph.deleteBranch
// - gitlens.graph.deleteTag
// - gitlens.graph.fetch
// - gitlens.graph.hideLocalBranch
// - gitlens.graph.hideRefGroup
// - gitlens.graph.hideRemote
// - gitlens.graph.hideRemoteBranch
// - gitlens.graph.hideTag
// - gitlens.graph.mergeBranchInto
// - gitlens.graph.openBranchOnRemote
// - gitlens.graph.openChangedFileDiffs
// - gitlens.graph.openChangedFileDiffsIndividually
// - gitlens.graph.openChangedFileDiffsWithMergeBase
// - gitlens.graph.openChangedFileDiffsWithWorking
// - gitlens.graph.openChangedFileDiffsWithWorkingIndividually
// - gitlens.graph.openChangedFileRevisions
// - gitlens.graph.openChangedFiles
// - gitlens.graph.openCommitOnRemote
// - gitlens.graph.openCommitOnRemote.multi
// - gitlens.graph.openInWorktree
// - gitlens.graph.openOnlyChangedFiles
// - gitlens.graph.openPullRequest
// - gitlens.graph.openPullRequestChanges
// - gitlens.graph.openPullRequestComparison
// - gitlens.graph.openPullRequestOnRemote
// - gitlens.graph.openWorktree
// - gitlens.graph.openWorktreeInNewWindow
// - gitlens.graph.publishBranch
// - gitlens.graph.pull
// - gitlens.graph.push
// - gitlens.graph.pushWithForce
// - gitlens.graph.rebaseOntoBranch
// - gitlens.graph.rebaseOntoCommit
// - gitlens.graph.rebaseOntoUpstream
// - gitlens.graph.refresh
// - gitlens.graph.renameBranch
// - gitlens.graph.resetColumnsCompact
// - gitlens.graph.resetColumnsDefault
// - gitlens.graph.resetCommit
// - gitlens.graph.resetToCommit
// - gitlens.graph.resetToTag
// - gitlens.graph.resetToTip
// - gitlens.graph.revert
// - gitlens.graph.scrollMarkerLocalBranchOff
// - gitlens.graph.scrollMarkerLocalBranchOn
// - gitlens.graph.scrollMarkerPullRequestOff
// - gitlens.graph.scrollMarkerPullRequestOn
// - gitlens.graph.scrollMarkerRemoteBranchOff
// - gitlens.graph.scrollMarkerRemoteBranchOn
// - gitlens.graph.scrollMarkerStashOff
// - gitlens.graph.scrollMarkerStashOn
// - gitlens.graph.scrollMarkerTagOff
// - gitlens.graph.scrollMarkerTagOn
// - gitlens.graph.shareAsCloudPatch
// - gitlens.graph.showInDetailsView
// - gitlens.graph.split
// - gitlens.graph.switchToAnotherBranch
// - gitlens.graph.switchToBranch
// - gitlens.graph.switchToCommit
// - gitlens.graph.switchToEditorLayout
// - gitlens.graph.switchToPanelLayout
// - gitlens.graph.switchToTag
// - gitlens.graph.undoCommit
// - gitlens.inviteToLiveShare
// - gitlens.launchpad.indicator.toggle
// - gitlens.openAssociatedPullRequestOnRemote
// - gitlens.openBlamePriorToChange
// - gitlens.openBranchOnRemote
// - gitlens.openBranchesOnRemote
// - gitlens.openChangedFiles
// - gitlens.openCloudPatch
// - gitlens.openCommitOnRemote
// - gitlens.openComparisonOnRemote
// - gitlens.openCurrentBranchOnRemote
// - gitlens.openFileFromRemote
// - gitlens.openFileHistory
// - gitlens.openFileOnRemote
// - gitlens.openFileOnRemoteFrom
// - gitlens.openFileRevision
// - gitlens.openFileRevisionFrom
// - gitlens.openFolderHistory
// - gitlens.openOnlyChangedFiles
// - gitlens.openPatch
// - gitlens.openPullRequestOnRemote
// - gitlens.openRepoOnRemote
// - gitlens.openRevisionFile
// - gitlens.openRevisionFile:editor/title
// - gitlens.openRevisionFromRemote
// - gitlens.openWorkingFile
// - gitlens.openWorkingFile:editor/context
// - gitlens.openWorkingFile:editor/title
// - gitlens.pastePatchFromClipboard
// - gitlens.plus.cloudIntegrations.connect
// - gitlens.plus.cloudIntegrations.manage
// - gitlens.plus.hide
// - gitlens.plus.login
// - gitlens.plus.logout
// - gitlens.plus.manage
// - gitlens.plus.reactivateProTrial
// - gitlens.plus.referFriend
// - gitlens.plus.refreshRepositoryAccess
// - gitlens.plus.restore
// - gitlens.plus.signUp
// - gitlens.plus.simulateSubscription
// - gitlens.plus.upgrade
// - gitlens.pullRepositories
// - gitlens.pushRepositories
// - gitlens.quickOpenFileHistory
// - gitlens.regenerateMarkdownDocument
// - gitlens.reset
// - gitlens.resetViewsLayout
// - gitlens.restore.file:views
// - gitlens.restorePrevious.file:views
// - gitlens.revealCommitInView
// - gitlens.setUpstream:graph
// - gitlens.setUpstream:views
// - gitlens.shareAsCloudPatch
// - gitlens.showAccountView
// - gitlens.showBranchesView
// - gitlens.showCommitDetailsView
// - gitlens.showCommitInView
// - gitlens.showCommitSearch
// - gitlens.showCommitsInView
// - gitlens.showCommitsView
// - gitlens.showContributorsView
// - gitlens.showDraftsView
// - gitlens.showFileHistoryView
// - gitlens.showGraph
// - gitlens.showGraphPage
// - gitlens.showGraphView
// - gitlens.showHomeView
// - gitlens.showInCommitGraph
// - gitlens.showInCommitGraphView
// - gitlens.showInDetailsView
// - gitlens.showLastQuickPick
// - gitlens.showLaunchpad
// - gitlens.showLaunchpadView
// - gitlens.showLineCommitInView
// - gitlens.showLineHistoryView
// - gitlens.showPatchDetailsPage
// - gitlens.showQuickBranchHistory
// - gitlens.showQuickCommitDetails
// - gitlens.showQuickRevisionDetails
// - gitlens.showQuickRevisionDetails:editor
// - gitlens.showQuickRevisionDetails:editor/title
// - gitlens.showQuickStashList
// - gitlens.showRemotesView
// - gitlens.showRepositoriesView
// - gitlens.showSearchAndCompareView
// - gitlens.showSettingsPage
// - gitlens.showSettingsPage!autolinks
// - gitlens.showSettingsPage!branches-view
// - gitlens.showSettingsPage!commit-graph
// - gitlens.showSettingsPage!commits-view
// - gitlens.showSettingsPage!contributors-view
// - gitlens.showSettingsPage!file-annotations
// - gitlens.showSettingsPage!file-history-view
// - gitlens.showSettingsPage!line-history-view
// - gitlens.showSettingsPage!remotes-view
// - gitlens.showSettingsPage!repositories-view
// - gitlens.showSettingsPage!search-compare-view
// - gitlens.showSettingsPage!stashes-view
// - gitlens.showSettingsPage!tags-view
// - gitlens.showSettingsPage!views
// - gitlens.showSettingsPage!worktrees-view
// - gitlens.showStashesView
// - gitlens.showTagsView
// - gitlens.showTimelinePage
// - gitlens.showTimelineView
// - gitlens.showWorkspacesView
// - gitlens.showWorktreesView
// - gitlens.star.branch.multi:views
// - gitlens.star.branch:graph
// - gitlens.star.branch:views
// - gitlens.star.repository.multi:views
// - gitlens.star.repository:views
// - gitlens.startWork
// - gitlens.stashApply:graph
// - gitlens.stashApply:views
// - gitlens.stashDelete.multi:views
// - gitlens.stashDelete:graph
// - gitlens.stashDelete:views
// - gitlens.stashRename:graph
// - gitlens.stashRename:views
// - gitlens.stashSave
// - gitlens.stashSave.files:scm
// - gitlens.stashSave.files:views
// - gitlens.stashSave.staged:scm
// - gitlens.stashSave.unstaged:scm
// - gitlens.stashSave:graph
// - gitlens.stashSave:scm
// - gitlens.stashSave:views
// - gitlens.stashesApply
// - gitlens.stashesApply:views
// - gitlens.switchMode
// - gitlens.timeline.refresh
// - gitlens.timeline.split
// - gitlens.toggleFileBlame
// - gitlens.toggleFileBlame:editor
// - gitlens.toggleFileBlame:editor/title
// - gitlens.toggleFileChanges
// - gitlens.toggleFileChanges:editor
// - gitlens.toggleFileChanges:editor/title
// - gitlens.toggleFileChangesOnly
// - gitlens.toggleFileHeatmap
// - gitlens.toggleFileHeatmap:editor
// - gitlens.toggleFileHeatmap:editor/title
// - gitlens.toggleFileHeatmapInDiffLeft
// - gitlens.toggleFileHeatmapInDiffRight
// - gitlens.toggleGraph
// - gitlens.toggleLineBlame
// - gitlens.toggleMaximizedGraph
// - gitlens.toggleReviewMode
// - gitlens.toggleZenMode
// - gitlens.unstar.branch.multi:views
// - gitlens.unstar.branch:graph
// - gitlens.unstar.branch:views
// - gitlens.unstar.repository.multi:views
// - gitlens.unstar.repository:views
// - gitlens.views.abortPausedOperation
// - gitlens.views.addAuthor
// - gitlens.views.addAuthor.multi
// - gitlens.views.addAuthors
// - gitlens.views.addPullRequestRemote
// - gitlens.views.addRemote
// - gitlens.views.applyChanges
// - gitlens.views.associateIssueWithBranch
// - gitlens.views.branches.attach
// - gitlens.views.branches.focus
// - gitlens.views.branches.refresh
// - gitlens.views.branches.resetViewLocation
// - gitlens.views.branches.setFilesLayoutToAuto
// - gitlens.views.branches.setFilesLayoutToList
// - gitlens.views.branches.setFilesLayoutToTree
// - gitlens.views.branches.setLayoutToList
// - gitlens.views.branches.setLayoutToTree
// - gitlens.views.branches.setShowAvatarsOff
// - gitlens.views.branches.setShowAvatarsOn
// - gitlens.views.branches.setShowBranchComparisonOff
// - gitlens.views.branches.setShowBranchComparisonOn
// - gitlens.views.branches.setShowBranchPullRequestOff
// - gitlens.views.branches.setShowBranchPullRequestOn
// - gitlens.views.branches.setShowRemoteBranchesOff
// - gitlens.views.branches.setShowRemoteBranchesOn
// - gitlens.views.branches.setShowStashesOff
// - gitlens.views.branches.setShowStashesOn
// - gitlens.views.branches.viewOptionsTitle
// - gitlens.views.browseRepoAtRevision
// - gitlens.views.browseRepoAtRevisionInNewWindow
// - gitlens.views.browseRepoBeforeRevision
// - gitlens.views.browseRepoBeforeRevisionInNewWindow
// - gitlens.views.cherryPick
// - gitlens.views.cherryPick.multi
// - gitlens.views.clearComparison
// - gitlens.views.clearReviewed
// - gitlens.views.closeRepository
// - gitlens.views.collapseNode
// - gitlens.views.commitDetails.focus
// - gitlens.views.commitDetails.refresh
// - gitlens.views.commitDetails.removeView
// - gitlens.views.commitDetails.resetViewLocation
// - gitlens.views.commitDetails.toggleVisibility
// - gitlens.views.commits.attach
// - gitlens.views.commits.focus
// - gitlens.views.commits.refresh
// - gitlens.views.commits.resetViewLocation
// - gitlens.views.commits.setCommitsFilterAuthors
// - gitlens.views.commits.setCommitsFilterOff
// - gitlens.views.commits.setFilesLayoutToAuto
// - gitlens.views.commits.setFilesLayoutToList
// - gitlens.views.commits.setFilesLayoutToTree
// - gitlens.views.commits.setShowAvatarsOff
// - gitlens.views.commits.setShowAvatarsOn
// - gitlens.views.commits.setShowBranchComparisonOff
// - gitlens.views.commits.setShowBranchComparisonOn
// - gitlens.views.commits.setShowBranchPullRequestOff
// - gitlens.views.commits.setShowBranchPullRequestOn
// - gitlens.views.commits.setShowMergeCommitsOff
// - gitlens.views.commits.setShowMergeCommitsOn
// - gitlens.views.commits.setShowStashesOff
// - gitlens.views.commits.setShowStashesOn
// - gitlens.views.commits.viewOptionsTitle
// - gitlens.views.compareAncestryWithWorking
// - gitlens.views.compareBranchWithHead
// - gitlens.views.compareFileWithSelected
// - gitlens.views.compareWithHead
// - gitlens.views.compareWithMergeBase
// - gitlens.views.compareWithSelected
// - gitlens.views.compareWithUpstream
// - gitlens.views.compareWithWorking
// - gitlens.views.continuePausedOperation
// - gitlens.views.contributors.attach
// - gitlens.views.contributors.focus
// - gitlens.views.contributors.refresh
// - gitlens.views.contributors.resetViewLocation
// - gitlens.views.contributors.setFilesLayoutToAuto
// - gitlens.views.contributors.setFilesLayoutToList
// - gitlens.views.contributors.setFilesLayoutToTree
// - gitlens.views.contributors.setShowAllBranchesOff
// - gitlens.views.contributors.setShowAllBranchesOn
// - gitlens.views.contributors.setShowAvatarsOff
// - gitlens.views.contributors.setShowAvatarsOn
// - gitlens.views.contributors.setShowMergeCommitsOff
// - gitlens.views.contributors.setShowMergeCommitsOn
// - gitlens.views.contributors.setShowStatisticsOff
// - gitlens.views.contributors.setShowStatisticsOn
// - gitlens.views.contributors.viewOptionsTitle
// - gitlens.views.copy
// - gitlens.views.copyAsMarkdown
// - gitlens.views.copyRemoteCommitUrl
// - gitlens.views.copyRemoteCommitUrl.multi
// - gitlens.views.copyUrl
// - gitlens.views.copyUrl.multi
// - gitlens.views.createBranch
// - gitlens.views.createPullRequest
// - gitlens.views.createTag
// - gitlens.views.createWorktree
// - gitlens.views.deleteBranch
// - gitlens.views.deleteBranch.multi
// - gitlens.views.deleteTag
// - gitlens.views.deleteTag.multi
// - gitlens.views.deleteWorktree
// - gitlens.views.deleteWorktree.multi
// - gitlens.views.dismissNode
// - gitlens.views.draft.open
// - gitlens.views.draft.openOnWeb
// - gitlens.views.drafts.create
// - gitlens.views.drafts.delete
// - gitlens.views.drafts.focus
// - gitlens.views.drafts.info
// - gitlens.views.drafts.refresh
// - gitlens.views.drafts.removeView
// - gitlens.views.drafts.resetViewLocation
// - gitlens.views.drafts.setShowAvatarsOff
// - gitlens.views.drafts.setShowAvatarsOn
// - gitlens.views.drafts.toggleVisibility
// - gitlens.views.editNode
// - gitlens.views.expandNode
// - gitlens.views.fetch
// - gitlens.views.fileHistory.attach
// - gitlens.views.fileHistory.changeBase
// - gitlens.views.fileHistory.focus
// - gitlens.views.fileHistory.refresh
// - gitlens.views.fileHistory.removeView
// - gitlens.views.fileHistory.resetViewLocation
// - gitlens.views.fileHistory.setCursorFollowingOff
// - gitlens.views.fileHistory.setCursorFollowingOn
// - gitlens.views.fileHistory.setEditorFollowingOff
// - gitlens.views.fileHistory.setEditorFollowingOn
// - gitlens.views.fileHistory.setModeCommits
// - gitlens.views.fileHistory.setModeContributors
// - gitlens.views.fileHistory.setRenameFollowingOff
// - gitlens.views.fileHistory.setRenameFollowingOn
// - gitlens.views.fileHistory.setShowAllBranchesOff
// - gitlens.views.fileHistory.setShowAllBranchesOn
// - gitlens.views.fileHistory.setShowAvatarsOff
// - gitlens.views.fileHistory.setShowAvatarsOn
// - gitlens.views.fileHistory.setShowMergeCommitsOff
// - gitlens.views.fileHistory.setShowMergeCommitsOn
// - gitlens.views.fileHistory.toggleVisibility
// - gitlens.views.fileHistory.viewOptionsTitle
// - gitlens.views.graph.focus
// - gitlens.views.graph.openInTab
// - gitlens.views.graph.refresh
// - gitlens.views.graph.removeView
// - gitlens.views.graph.resetViewLocation
// - gitlens.views.graph.toggleVisibility
// - gitlens.views.graphDetails.focus
// - gitlens.views.graphDetails.refresh
// - gitlens.views.graphDetails.removeView
// - gitlens.views.graphDetails.resetViewLocation
// - gitlens.views.graphDetails.toggleVisibility
// - gitlens.views.highlightChanges
// - gitlens.views.highlightRevisionChanges
// - gitlens.views.home.disablePreview
// - gitlens.views.home.discussions
// - gitlens.views.home.enablePreview
// - gitlens.views.home.focus
// - gitlens.views.home.help
// - gitlens.views.home.info
// - gitlens.views.home.issues
// - gitlens.views.home.previewFeedback
// - gitlens.views.home.refresh
// - gitlens.views.home.removeView
// - gitlens.views.home.resetViewLocation
// - gitlens.views.home.toggleVisibility
// - gitlens.views.home.whatsNew
// - gitlens.views.launchpad.attach
// - gitlens.views.launchpad.copy
// - gitlens.views.launchpad.focus
// - gitlens.views.launchpad.info
// - gitlens.views.launchpad.refresh
// - gitlens.views.launchpad.removeView
// - gitlens.views.launchpad.resetViewLocation
// - gitlens.views.launchpad.setFilesLayoutToAuto
// - gitlens.views.launchpad.setFilesLayoutToList
// - gitlens.views.launchpad.setFilesLayoutToTree
// - gitlens.views.launchpad.setShowAvatarsOff
// - gitlens.views.launchpad.setShowAvatarsOn
// - gitlens.views.launchpad.toggleVisibility
// - gitlens.views.launchpad.viewOptionsTitle
// - gitlens.views.lineHistory.changeBase
// - gitlens.views.lineHistory.focus
// - gitlens.views.lineHistory.refresh
// - gitlens.views.lineHistory.removeView
// - gitlens.views.lineHistory.resetViewLocation
// - gitlens.views.lineHistory.setEditorFollowingOff
// - gitlens.views.lineHistory.setEditorFollowingOn
// - gitlens.views.lineHistory.setShowAvatarsOff
// - gitlens.views.lineHistory.setShowAvatarsOn
// - gitlens.views.lineHistory.toggleVisibility
// - gitlens.views.loadAllChildren
// - gitlens.views.loadMoreChildren
// - gitlens.views.mergeBranchInto
// - gitlens.views.mergeChangesWithWorking
// - gitlens.views.openBranchOnRemote
// - gitlens.views.openBranchOnRemote.multi
// - gitlens.views.openChangedFileDiffs
// - gitlens.views.openChangedFileDiffsIndividually
// - gitlens.views.openChangedFileDiffsWithMergeBase
// - gitlens.views.openChangedFileDiffsWithWorking
// - gitlens.views.openChangedFileDiffsWithWorkingIndividually
// - gitlens.views.openChangedFileRevisions
// - gitlens.views.openChangedFiles
// - gitlens.views.openChanges
// - gitlens.views.openChangesWithMergeBase
// - gitlens.views.openChangesWithWorking
// - gitlens.views.openCommitOnRemote
// - gitlens.views.openCommitOnRemote.multi
// - gitlens.views.openDirectoryDiff
// - gitlens.views.openDirectoryDiffWithWorking
// - gitlens.views.openFile
// - gitlens.views.openFileRevision
// - gitlens.views.openInIntegratedTerminal
// - gitlens.views.openInTerminal
// - gitlens.views.openInWorktree
// - gitlens.views.openOnlyChangedFiles
// - gitlens.views.openPausedOperationInRebaseEditor
// - gitlens.views.openPreviousChangesWithWorking
// - gitlens.views.openPullRequest
// - gitlens.views.openPullRequestChanges
// - gitlens.views.openPullRequestComparison
// - gitlens.views.openUrl
// - gitlens.views.openUrl.multi
// - gitlens.views.openWorktree
// - gitlens.views.openWorktreeInNewWindow
// - gitlens.views.openWorktreeInNewWindow.multi
// - gitlens.views.patchDetails.close
// - gitlens.views.patchDetails.focus
// - gitlens.views.patchDetails.refresh
// - gitlens.views.patchDetails.resetViewLocation
// - gitlens.views.pruneRemote
// - gitlens.views.publishBranch
// - gitlens.views.publishRepository
// - gitlens.views.pull
// - gitlens.views.pullRequest.close
// - gitlens.views.pullRequest.focus
// - gitlens.views.pullRequest.refresh
// - gitlens.views.pullRequest.resetViewLocation
// - gitlens.views.pullRequest.setFilesLayoutToAuto
// - gitlens.views.pullRequest.setFilesLayoutToList
// - gitlens.views.pullRequest.setFilesLayoutToTree
// - gitlens.views.pullRequest.setShowAvatarsOff
// - gitlens.views.pullRequest.setShowAvatarsOn
// - gitlens.views.push
// - gitlens.views.pushToCommit
// - gitlens.views.pushWithForce
// - gitlens.views.rebaseOntoBranch
// - gitlens.views.rebaseOntoCommit
// - gitlens.views.rebaseOntoUpstream
// - gitlens.views.refreshNode
// - gitlens.views.remotes.attach
// - gitlens.views.remotes.focus
// - gitlens.views.remotes.refresh
// - gitlens.views.remotes.resetViewLocation
// - gitlens.views.remotes.setFilesLayoutToAuto
// - gitlens.views.remotes.setFilesLayoutToList
// - gitlens.views.remotes.setFilesLayoutToTree
// - gitlens.views.remotes.setLayoutToList
// - gitlens.views.remotes.setLayoutToTree
// - gitlens.views.remotes.setShowAvatarsOff
// - gitlens.views.remotes.setShowAvatarsOn
// - gitlens.views.remotes.setShowBranchPullRequestOff
// - gitlens.views.remotes.setShowBranchPullRequestOn
// - gitlens.views.remotes.viewOptionsTitle
// - gitlens.views.removeRemote
// - gitlens.views.renameBranch
// - gitlens.views.repositories.attach
// - gitlens.views.repositories.focus
// - gitlens.views.repositories.refresh
// - gitlens.views.repositories.resetViewLocation
// - gitlens.views.repositories.setAutoRefreshToOff
// - gitlens.views.repositories.setAutoRefreshToOn
// - gitlens.views.repositories.setBranchesLayoutToList
// - gitlens.views.repositories.setBranchesLayoutToTree
// - gitlens.views.repositories.setBranchesShowBranchComparisonOff
// - gitlens.views.repositories.setBranchesShowBranchComparisonOn
// - gitlens.views.repositories.setBranchesShowStashesOff
// - gitlens.views.repositories.setBranchesShowStashesOn
// - gitlens.views.repositories.setFilesLayoutToAuto
// - gitlens.views.repositories.setFilesLayoutToList
// - gitlens.views.repositories.setFilesLayoutToTree
// - gitlens.views.repositories.setShowAvatarsOff
// - gitlens.views.repositories.setShowAvatarsOn
// - gitlens.views.repositories.setShowSectionBranchComparisonOff
// - gitlens.views.repositories.setShowSectionBranchComparisonOn
// - gitlens.views.repositories.setShowSectionBranchesOff
// - gitlens.views.repositories.setShowSectionBranchesOn
// - gitlens.views.repositories.setShowSectionCommitsOff
// - gitlens.views.repositories.setShowSectionCommitsOn
// - gitlens.views.repositories.setShowSectionContributorsOff
// - gitlens.views.repositories.setShowSectionContributorsOn
// - gitlens.views.repositories.setShowSectionOff
// - gitlens.views.repositories.setShowSectionRemotesOff
// - gitlens.views.repositories.setShowSectionRemotesOn
// - gitlens.views.repositories.setShowSectionStashesOff
// - gitlens.views.repositories.setShowSectionStashesOn
// - gitlens.views.repositories.setShowSectionTagsOff
// - gitlens.views.repositories.setShowSectionTagsOn
// - gitlens.views.repositories.setShowSectionUpstreamStatusOff
// - gitlens.views.repositories.setShowSectionUpstreamStatusOn
// - gitlens.views.repositories.setShowSectionWorktreesOff
// - gitlens.views.repositories.setShowSectionWorktreesOn
// - gitlens.views.repositories.viewOptionsTitle
// - gitlens.views.resetCommit
// - gitlens.views.resetToCommit
// - gitlens.views.resetToTip
// - gitlens.views.revealRepositoryInExplorer
// - gitlens.views.revealWorktreeInExplorer
// - gitlens.views.revert
// - gitlens.views.scm.grouped.attachAll
// - gitlens.views.scm.grouped.branches.attach
// - gitlens.views.scm.grouped.branches.detach
// - gitlens.views.scm.grouped.branches.setAsDefault
// - gitlens.views.scm.grouped.branches.visibility.hide
// - gitlens.views.scm.grouped.branches.visibility.show
// - gitlens.views.scm.grouped.commits.attach
// - gitlens.views.scm.grouped.commits.detach
// - gitlens.views.scm.grouped.commits.setAsDefault
// - gitlens.views.scm.grouped.commits.visibility.hide
// - gitlens.views.scm.grouped.commits.visibility.show
// - gitlens.views.scm.grouped.contributors.attach
// - gitlens.views.scm.grouped.contributors.detach
// - gitlens.views.scm.grouped.contributors.setAsDefault
// - gitlens.views.scm.grouped.contributors.visibility.hide
// - gitlens.views.scm.grouped.contributors.visibility.show
// - gitlens.views.scm.grouped.detachAll
// - gitlens.views.scm.grouped.fileHistory.attach
// - gitlens.views.scm.grouped.fileHistory.detach
// - gitlens.views.scm.grouped.fileHistory.setAsDefault
// - gitlens.views.scm.grouped.fileHistory.visibility.hide
// - gitlens.views.scm.grouped.fileHistory.visibility.show
// - gitlens.views.scm.grouped.focus
// - gitlens.views.scm.grouped.launchpad.attach
// - gitlens.views.scm.grouped.launchpad.detach
// - gitlens.views.scm.grouped.launchpad.setAsDefault
// - gitlens.views.scm.grouped.launchpad.visibility.hide
// - gitlens.views.scm.grouped.launchpad.visibility.show
// - gitlens.views.scm.grouped.refresh
// - gitlens.views.scm.grouped.remotes.attach
// - gitlens.views.scm.grouped.remotes.detach
// - gitlens.views.scm.grouped.remotes.setAsDefault
// - gitlens.views.scm.grouped.remotes.visibility.hide
// - gitlens.views.scm.grouped.remotes.visibility.show
// - gitlens.views.scm.grouped.removeView
// - gitlens.views.scm.grouped.repositories
// - gitlens.views.scm.grouped.repositories.attach
// - gitlens.views.scm.grouped.repositories.detach
// - gitlens.views.scm.grouped.repositories.setAsDefault
// - gitlens.views.scm.grouped.repositories.visibility.hide
// - gitlens.views.scm.grouped.repositories.visibility.show
// - gitlens.views.scm.grouped.resetAll
// - gitlens.views.scm.grouped.resetViewLocation
// - gitlens.views.scm.grouped.searchAndCompare.attach
// - gitlens.views.scm.grouped.searchAndCompare.detach
// - gitlens.views.scm.grouped.searchAndCompare.setAsDefault
// - gitlens.views.scm.grouped.searchAndCompare.visibility.hide
// - gitlens.views.scm.grouped.searchAndCompare.visibility.show
// - gitlens.views.scm.grouped.stashes.attach
// - gitlens.views.scm.grouped.stashes.detach
// - gitlens.views.scm.grouped.stashes.setAsDefault
// - gitlens.views.scm.grouped.stashes.visibility.hide
// - gitlens.views.scm.grouped.stashes.visibility.show
// - gitlens.views.scm.grouped.tags.attach
// - gitlens.views.scm.grouped.tags.detach
// - gitlens.views.scm.grouped.tags.setAsDefault
// - gitlens.views.scm.grouped.tags.visibility.hide
// - gitlens.views.scm.grouped.tags.visibility.show
// - gitlens.views.scm.grouped.toggleVisibility
// - gitlens.views.scm.grouped.worktrees.attach
// - gitlens.views.scm.grouped.worktrees.detach
// - gitlens.views.scm.grouped.worktrees.setAsDefault
// - gitlens.views.scm.grouped.worktrees.visibility.hide
// - gitlens.views.scm.grouped.worktrees.visibility.show
// - gitlens.views.searchAndCompare.attach
// - gitlens.views.searchAndCompare.clear
// - gitlens.views.searchAndCompare.focus
// - gitlens.views.searchAndCompare.refresh
// - gitlens.views.searchAndCompare.removeView
// - gitlens.views.searchAndCompare.resetViewLocation
// - gitlens.views.searchAndCompare.searchCommits
// - gitlens.views.searchAndCompare.selectForCompare
// - gitlens.views.searchAndCompare.setFilesLayoutToAuto
// - gitlens.views.searchAndCompare.setFilesLayoutToList
// - gitlens.views.searchAndCompare.setFilesLayoutToTree
// - gitlens.views.searchAndCompare.setShowAvatarsOff
// - gitlens.views.searchAndCompare.setShowAvatarsOn
// - gitlens.views.searchAndCompare.swapComparison
// - gitlens.views.searchAndCompare.toggleVisibility
// - gitlens.views.searchAndCompare.viewOptionsTitle
// - gitlens.views.selectFileForCompare
// - gitlens.views.selectForCompare
// - gitlens.views.setAsDefault
// - gitlens.views.setBranchComparisonToBranch
// - gitlens.views.setBranchComparisonToWorking
// - gitlens.views.setContributorsStatisticsOff
// - gitlens.views.setContributorsStatisticsOn
// - gitlens.views.setResultsCommitsFilterAuthors
// - gitlens.views.setResultsCommitsFilterOff
// - gitlens.views.setResultsFilesFilterOff
// - gitlens.views.setResultsFilesFilterOnLeft
// - gitlens.views.setResultsFilesFilterOnRight
// - gitlens.views.setShowRelativeDateMarkersOff
// - gitlens.views.setShowRelativeDateMarkersOn
// - gitlens.views.skipPausedOperation
// - gitlens.views.stageDirectory
// - gitlens.views.stageFile
// - gitlens.views.stashes.attach
// - gitlens.views.stashes.focus
// - gitlens.views.stashes.refresh
// - gitlens.views.stashes.resetViewLocation
// - gitlens.views.stashes.setFilesLayoutToAuto
// - gitlens.views.stashes.setFilesLayoutToList
// - gitlens.views.stashes.setFilesLayoutToTree
// - gitlens.views.stashes.viewOptionsTitle
// - gitlens.views.switchToAnotherBranch
// - gitlens.views.switchToBranch
// - gitlens.views.switchToCommit
// - gitlens.views.switchToTag
// - gitlens.views.tags.attach
// - gitlens.views.tags.focus
// - gitlens.views.tags.refresh
// - gitlens.views.tags.resetViewLocation
// - gitlens.views.tags.setFilesLayoutToAuto
// - gitlens.views.tags.setFilesLayoutToList
// - gitlens.views.tags.setFilesLayoutToTree
// - gitlens.views.tags.setLayoutToList
// - gitlens.views.tags.setLayoutToTree
// - gitlens.views.tags.setShowAvatarsOff
// - gitlens.views.tags.setShowAvatarsOn
// - gitlens.views.tags.viewOptionsTitle
// - gitlens.views.timeline.focus
// - gitlens.views.timeline.refresh
// - gitlens.views.timeline.removeView
// - gitlens.views.timeline.resetViewLocation
// - gitlens.views.timeline.toggleVisibility
// - gitlens.views.title.createBranch
// - gitlens.views.title.createTag
// - gitlens.views.title.createWorktree
// - gitlens.views.undoCommit
// - gitlens.views.unsetAsDefault
// - gitlens.views.unstageDirectory
// - gitlens.views.unstageFile
// - gitlens.views.workspaces.addRepos
// - gitlens.views.workspaces.addReposFromLinked
// - gitlens.views.workspaces.changeAutoAddSetting
// - gitlens.views.workspaces.convert
// - gitlens.views.workspaces.create
// - gitlens.views.workspaces.createLocal
// - gitlens.views.workspaces.delete
// - gitlens.views.workspaces.focus
// - gitlens.views.workspaces.info
// - gitlens.views.workspaces.locateAllRepos
// - gitlens.views.workspaces.openLocal
// - gitlens.views.workspaces.openLocalNewWindow
// - gitlens.views.workspaces.refresh
// - gitlens.views.workspaces.removeView
// - gitlens.views.workspaces.repo.addToWindow
// - gitlens.views.workspaces.repo.locate
// - gitlens.views.workspaces.repo.open
// - gitlens.views.workspaces.repo.openInNewWindow
// - gitlens.views.workspaces.repo.remove
// - gitlens.views.workspaces.resetViewLocation
// - gitlens.views.workspaces.toggleVisibility
// - gitlens.views.worktrees.attach
// - gitlens.views.worktrees.focus
// - gitlens.views.worktrees.refresh
// - gitlens.views.worktrees.resetViewLocation
// - gitlens.views.worktrees.setFilesLayoutToAuto
// - gitlens.views.worktrees.setFilesLayoutToList
// - gitlens.views.worktrees.setFilesLayoutToTree
// - gitlens.views.worktrees.setLayoutToList
// - gitlens.views.worktrees.setLayoutToTree
// - gitlens.views.worktrees.setShowAvatarsOff
// - gitlens.views.worktrees.setShowAvatarsOn
// - gitlens.views.worktrees.setShowBranchComparisonOff
// - gitlens.views.worktrees.setShowBranchComparisonOn
// - gitlens.views.worktrees.setShowBranchPullRequestOff
// - gitlens.views.worktrees.setShowBranchPullRequestOn
// - gitlens.views.worktrees.setShowStashesOff
// - gitlens.views.worktrees.setShowStashesOn
// - gitlens.views.worktrees.viewOptionsTitle
// - gitlens.visualizeHistory.file
// - gitlens.visualizeHistory.file:editor
// - gitlens.visualizeHistory.file:explorer
// - gitlens.visualizeHistory.file:scm
// - gitlens.visualizeHistory.file:views
// - gitlens.visualizeHistory.folder:explorer
// - gitlens.visualizeHistory.folder:scm
// - gitlens.visualizeHistory.repo:scm
// - gitlens.visualizeHistory.repo:views
// - go.add.package.workspace
// - go.add.tags
// - go.apply.coverprofile
// - go.benchmark.cursor
// - go.benchmark.file
// - go.benchmark.package
// - go.browse.packages
// - go.build.package
// - go.build.workspace
// - go.debug.cursor
// - go.debug.previous
// - go.debug.subtest.cursor
// - go.debug.toggleHideSystemGoroutines
// - go.environment.choose
// - go.explorer.focus
// - go.explorer.open
// - go.explorer.refresh
// - go.explorer.resetViewLocation
// - go.extractServerChannel
// - go.get.package
// - go.global.resetState
// - go.gopath
// - go.goroot
// - go.impl.cursor
// - go.import.add
// - go.install.package
// - go.languageserver.maintain
// - go.languageserver.restart
// - go.lint.package
// - go.lint.workspace
// - go.locate.tools
// - go.package.outline.focus
// - go.package.outline.resetViewLocation
// - go.playground
// - go.remove.tags
// - go.run.modinit
// - go.show.commands
// - go.subtest.cursor
// - go.survey.resetConfig
// - go.survey.showConfig
// - go.test.cancel
// - go.test.captureProfile
// - go.test.coverage
// - go.test.cursor
// - go.test.cursorOrPrevious
// - go.test.deleteProfile
// - go.test.file
// - go.test.generate.file
// - go.test.generate.function
// - go.test.generate.package
// - go.test.package
// - go.test.previous
// - go.test.profile.focus
// - go.test.profile.resetViewLocation
// - go.test.refresh
// - go.test.showProfileFile
// - go.test.showProfiles
// - go.test.workspace
// - go.toggle.gc_details
// - go.toggle.test.file
// - go.tools.install
// - go.vet.package
// - go.vet.workspace
// - go.vulncheck.toggle
// - go.welcome
// - go.workspace.editEnv
// - go.workspace.resetEnv
// - go.workspace.resetState
// - goToNextReferenceFromEmbeddedEditor
// - goToPreviousReferenceFromEmbeddedEditor
// - hideCustomTitleBar
// - hideCustomTitleBarInFullScreen
// - imagePreview.copyImage
// - imagePreview.zoomIn
// - imagePreview.zoomOut
// - inlayHints.startReadingLineWithHint
// - inlineChat.hideHint
// - inlineChat.showHint
// - interactive.acceptChanges
// - interactive.input.clear
// - interactiveEditor.start
// - ipynb.cleanInvalidImageAttachment
// - ipynb.newUntitledIpynb
// - ipynb.openIpynbInNotebookEditor
// - javascript.goToProjectConfig
// - javascript.reloadProjects
// - javascript.removeUnusedImports
// - javascript.sortImports
// - jsBrowserBreakpoints.focus
// - jsBrowserBreakpoints.resetViewLocation
// - jsDebugNetworkTree.focus
// - jsDebugNetworkTree.resetViewLocation
// - jsExcludedCallers.focus
// - jsExcludedCallers.resetViewLocation
// - json.clearCache
// - json.sort
// - keybindings.editor.clearSearchHistory
// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.copyCommandTitle
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showExtensionKeybindings
// - keybindings.editor.showUserKeybindings
// - lastCursorLineSelect
// - lastCursorLineSelectDrag
// - lastCursorWordSelect
// - layoutEditorGroups
// - list.collapseAllToFocus
// - list.focusParent
// - list.resizeColumn
// - list.scrollLeft
// - list.scrollRight
// - list.selectAndPreserveFocus
// - list.toggleFilterOnType
// - list.toggleFindMatchType
// - list.toggleFindMode
// - list.toggleKeyboardNavigation
// - list.triggerTypeNavigation
// - lldb.alternateBackend
// - lldb.attach
// - lldb.changeDisplaySettings
// - lldb.commandPrompt
// - lldb.diagnose
// - lldb.displayFormat
// - lldb.excludedCallers.add
// - lldb.excludedCallers.focus
// - lldb.excludedCallers.remove
// - lldb.excludedCallers.removeAll
// - lldb.excludedCallers.resetViewLocation
// - lldb.getCargoLaunchConfigs
// - lldb.loadedModules.focus
// - lldb.loadedModules.resetViewLocation
// - lldb.modules.copyValue
// - lldb.showDisassembly
// - lldb.symbols
// - lldb.toggleConsoleMode
// - lldb.toggleDerefPointers
// - lldb.toggleDisassembly
// - lldb.viewMemory
// - loadedScripts.collapse
// - markdown.editor.insertImageFromWorkspace
// - markdown.editor.insertLinkFromWorkspace
// - markdown.extension.editing.toggleCodeBlock
// - markdown.extension.editing.toggleCodeSpan
// - markdown.extension.editing.toggleList
// - markdown.extension.editing.toggleMathReverse
// - markdown.extension.printToHtml
// - markdown.extension.printToHtmlBatch
// - markdown.extension.toc.addSecNumbers
// - markdown.extension.toc.create
// - markdown.extension.toc.removeSecNumbers
// - markdown.extension.toc.update
// - markdown.findAllFileReferences
// - markdown.preview.refresh
// - markdown.preview.toggleLock
// - markdown.showLockedPreviewToSide
// - markdown.showPreviewSecuritySelector
// - markdown.showSource
// - mcp.deeplinkInstall
// - mcp.needsAuth
// - mcp.progressNotification
// - mcp.reloadClient
// - mcp.toolListChanged
// - mcp.updateStatus
// - memoryMonitor.triggerManualSnapshot
// - menu.resetHiddenStates
// - merge-conflict.accept.all-both
// - merge-conflict.accept.all-current
// - merge-conflict.accept.all-incoming
// - merge-conflict.accept.both
// - merge-conflict.accept.current
// - merge-conflict.accept.incoming
// - merge-conflict.accept.selection
// - merge-conflict.compare
// - merge-conflict.next
// - merge-conflict.previous
// - merge-conflict.resolve-in-chat
// - merge.acceptAllInput1
// - merge.acceptAllInput2
// - merge.columnLayout
// - merge.dev.copyContentsJson
// - merge.dev.loadContentsFromFolder
// - merge.dev.openContentsJson
// - merge.dev.openSelectionInTemporaryMergeEditor
// - merge.dev.saveContentsToFolder
// - merge.goToNextUnhandledConflict
// - merge.goToPreviousUnhandledConflict
// - merge.mixedLayout
// - merge.openBaseEditor
// - merge.openResult
// - merge.showBase
// - merge.showBaseCenter
// - merge.showBaseTop
// - merge.showNonConflictingChanges
// - merge.toggleActiveConflictInput1
// - merge.toggleActiveConflictInput2
// - mergeEditor.acceptMerge
// - mergeEditor.compareInput1WithBase
// - mergeEditor.compareInput2WithBase
// - mergeEditor.resetCloseWithConflictsChoice
// - mergeEditor.resetResultToBaseAndAutoMerge
// - multiDiffEditor.collapseAll
// - multiDiffEditor.expandAll
// - multiDiffEditor.goToFile
// - noop
// - notebook.action.changeTabDisplaySize
// - notebook.action.convertIndentationToSpaces
// - notebook.action.convertIndentationToTabs
// - notebook.action.indentUsingSpaces
// - notebook.action.indentUsingTabs
// - notebook.action.toggleNotebookStickyScroll
// - notebook.cancelExecution
// - notebook.cell.cancelExecution
// - notebook.cell.chat.close
// - notebook.cell.chat.explainError
// - notebook.cell.chat.fixError
// - notebook.cell.chat.restore
// - notebook.cell.chat.startAtTop
// - notebook.cell.chat.stop
// - notebook.cell.collapseAllCellInputs
// - notebook.cell.collapseAllCellOutputs
// - notebook.cell.copy
// - notebook.cell.cut
// - notebook.cell.executeAndFocusContainer
// - notebook.cell.executeCellAndBelow
// - notebook.cell.executeCellsAbove
// - notebook.cell.expandAllCellInputs
// - notebook.cell.expandAllCellOutputs
// - notebook.cell.insertCodeCellAboveAndFocusContainer
// - notebook.cell.insertCodeCellAtTop
// - notebook.cell.insertCodeCellBelowAndFocusContainer
// - notebook.cell.insertMarkdownCellAbove
// - notebook.cell.insertMarkdownCellAtTop
// - notebook.cell.insertMarkdownCellBelow
// - notebook.cell.joinSelected
// - notebook.cell.paste
// - notebook.cell.toggleLineNumbers
// - notebook.cell.toggleOutputs
// - notebook.cellOuput.showEmptyOutputs
// - notebook.cellOutput.addToChat
// - notebook.cellOutput.copy
// - notebook.cellOutput.openInTextEditor
// - notebook.chat.selectAndInsertKernelVariable
// - notebook.clearAllCellsOutputs
// - notebook.clearAllInlineValues
// - notebook.clearNotebookEdtitorTypeCache
// - notebook.clearNotebookKernelsMRUCache
// - notebook.developer.addCellOverlays
// - notebook.developer.addViewZones
// - notebook.diff.cell.revertInput
// - notebook.diff.cell.revertMetadata
// - notebook.diff.cell.revertOutputs
// - notebook.diff.cell.switchOutputRenderingStyleToText
// - notebook.diff.cell.toggleCollapseUnchangedRegions
// - notebook.diff.inline.toggle
// - notebook.diff.openFile
// - notebook.diff.revertMetadata
// - notebook.diff.showMetadata
// - notebook.diff.showOutputs
// - notebook.diff.switchToText
// - notebook.diffEditor.2.cell.revertInput
// - notebook.diffEditor.2.cell.revertMetadata
// - notebook.diffEditor.2.cell.revertOutputs
// - notebook.diffEditor.2.goToCell
// - notebook.diffEditor.hideUnchangedCells
// - notebook.diffEditor.showUnchangedCells
// - notebook.execute
// - notebook.inlineChat.acceptChangesAndRun
// - notebook.inspectLayout
// - notebook.interruptExecution
// - notebook.openVariablesView
// - notebook.outline.toggleCodeCellSymbols
// - notebook.outline.toggleCodeCells
// - notebook.outline.toggleShowMarkdownHeadersOnly
// - notebook.renderAllMarkdownCells
// - notebook.revealLastFailedCell
// - notebook.revealRunningCell
// - notebook.saveMimeTypeOrder
// - notebook.section.expandSection
// - notebook.section.foldSection
// - notebook.section.runCells
// - notebook.section.runSingleCell
// - notebook.selectIndentation
// - notebook.setProfile
// - notebook.toggle.diff.cell.ignoreTrimWhitespace
// - notebook.toggleCellToolbarPosition
// - notebook.toggleCellToolbarPositionFromEditorTitle
// - notebook.toggleLayoutTroubleshoot
// - notebook.toggleLineNumbers
// - notebook.toggleLineNumbersFromEditorTitle
// - notepad.focus
// - notepad.removeView
// - notepad.resetViewLocation
// - notepad.toggleVisibility
// - notifications.clearAll
// - notifications.focusToasts
// - notifications.toggleDoNotDisturbMode
// - notifications.toggleDoNotDisturbModeBySource
// - notifications.toggleList
// - npm.debugScript
// - npm.focus
// - npm.openScript
// - npm.packageManager
// - npm.refresh
// - npm.resetViewLocation
// - npm.runInstall
// - npm.runScript
// - npm.runScriptFromFolder
// - npm.runSelectedScript
// - openEditors.closeAll
// - openEditors.newUntitledFile
// - openInIntegratedTerminal
// - openInTerminal
// - openReference
// - openapi.addBasePath
// - openapi.addDefinitionObject
// - openapi.addHost
// - openapi.addInfo
// - openapi.addOperation
// - openapi.addParameterBody
// - openapi.addParameterOther
// - openapi.addParameterPath
// - openapi.addPath
// - openapi.addResponse
// - openapi.addSecurity
// - openapi.addSecurityDefinitionApiKey
// - openapi.addSecurityDefinitionBasic
// - openapi.addSecurityDefinitionOauth2Access
// - openapi.copyJsonReference
// - openapi.copyNodeJsonReference
// - openapi.createNewThree
// - openapi.createNewThreeOne
// - openapi.createNewThreeOneYaml
// - openapi.createNewThreeYaml
// - openapi.createNewTwo
// - openapi.createNewTwoYaml
// - openapi.deleteOperation
// - openapi.deletePath
// - openapi.exportAuditReport
// - openapi.outline.resetSearch
// - openapi.outlineSingleOperationAudit
// - openapi.outlineSingleOperationScan
// - openapi.outlineTryOperation
// - openapi.platform.apiRename
// - openapi.platform.apisFilter
// - openapi.platform.apisFilterReset
// - openapi.platform.collectionAddToFavorite
// - openapi.platform.collectionRemoveFromFavorite
// - openapi.platform.collectionRename
// - openapi.platform.collectionsFilter
// - openapi.platform.collectionsFilterReset
// - openapi.platform.createApi
// - openapi.platform.createApiFromUrl
// - openapi.platform.createCollection
// - openapi.platform.deleteApi
// - openapi.platform.deleteCollection
// - openapi.platform.editorDataDictionaryBulkUpdateProperties
// - openapi.platform.editorOpenScanconfig
// - openapi.platform.editorReloadApiFromUrl
// - openapi.platform.editorRunFirstOperationScan
// - openapi.platform.exportScanReport
// - openapi.platform.favoriteApisFilter
// - openapi.platform.favoriteApisFilterReset
// - openapi.platform.loadAuditReportFromFile
// - openapi.platform.openInWebUI
// - openapi.platform.openSignUp
// - openapi.platform.refreshCollections
// - openapi.previewRedoc
// - openapi.previewSwaggerUI
// - openapi.searchOutline
// - openapi.securityAudit
// - openapi.securityGqlAudit
// - openapi.showConfiguration
// - openapi.showSettings
// - openapi.v3addComponentsParameter
// - openapi.v3addComponentsResponse
// - openapi.v3addComponentsSchema
// - openapi.v3addInfo
// - openapi.v3addSecuritySchemeApiKey
// - openapi.v3addSecuritySchemeBasic
// - openapi.v3addSecuritySchemeJWT
// - openapi.v3addSecuritySchemeOauth2Access
// - openapi.v3addServer
// - openapiNotSelectedOutline.focus
// - openapiNotSelectedOutline.removeView
// - openapiNotSelectedOutline.resetViewLocation
// - openapiNotSelectedOutline.toggleVisibility
// - openapiOutline.focus
// - openapiOutline.resetViewLocation
// - outline.collapse
// - outline.expand
// - outline.filterOnType
// - outline.focus
// - outline.followCursor
// - outline.removeView
// - outline.resetViewLocation
// - outline.sortByKind
// - outline.sortByName
// - outline.sortByPosition
// - outline.toggleVisibility
// - paste
// - perf.event.profiling
// - perf.insta.printAsyncCycles
// - perf.insta.printTraces
// - perfview.show
// - platformExplorer.focus
// - platformExplorer.resetViewLocation
// - prettier.createConfigFile
// - prettier.forceFormatDocument
// - problems.action.copyMessage
// - problems.action.copyRelatedInformationMessage
// - problems.action.showMultilineMessage
// - problems.action.showSinglelineMessage
// - proto3.compile.all
// - proto3.compile.one
// - protolint.lint
// - pylance.dumpCachedTypes
// - pylance.dumpCodeFlowGraph
// - pylance.dumpNodes
// - pylance.dumpTokens
// - pylance.dumpTypes
// - pylance.gotoOutputChannel
// - pylance.indexing.clearPersistedIndices
// - pylance.learnMoreAboutImportResolution
// - pylance.logging.start
// - pylance.logging.stop
// - pylance.profiling.start
// - pylance.profiling.stop
// - pylance.reportIssue
// - pylint.restart
// - pyright.dumpCachedTypes
// - pyright.dumpCodeFlowGraph
// - pyright.dumpNodes
// - pyright.dumpTokens
// - pyright.dumpTypes
// - pyright.organizeimports
// - pyright.restartserver
// - python.analysis.restartLanguageServer
// - python.clearCacheAndReload
// - python.clearWorkspaceInterpreter
// - python.configureTests
// - python.createEnvironment
// - python.createEnvironment-button
// - python.createNewFile
// - python.createTerminal
// - python.execInDedicatedTerminal
// - python.execInTerminal
// - python.execInTerminal-icon
// - python.execSelectionInDjangoShell
// - python.installJupyter
// - python.reportIssue
// - python.setInterpreter
// - python.startNativeREPL
// - python.startREPL
// - python.viewLanguageServerOutput
// - python.viewOutput
// - rcp-server.disable
// - rcp-server.enable
// - rcp-server.manageApprovedExtensions
// - rcp-server.restart
// - rcp-server.showStatus
// - refactorPreview
// - refactorPreview.discard
// - refactorPreview.focus
// - refactorPreview.groupByFile
// - refactorPreview.groupByType
// - refactorPreview.resetViewContainerLocation
// - refactorPreview.resetViewLocation
// - refactorPreview.toggleGrouping
// - references-view.clear
// - references-view.clearHistory
// - references-view.copy
// - references-view.copyAll
// - references-view.copyPath
// - references-view.findImplementations
// - references-view.pickFromHistory
// - references-view.refind
// - references-view.refresh
// - references-view.removeCallItem
// - references-view.removeReferenceItem
// - references-view.removeTypeItem
// - references-view.showIncomingCalls
// - references-view.showOutgoingCalls
// - references-view.showSubtypes
// - references-view.showSupertypes
// - references-view.showTypeHierarchy
// - references-view.tree.focus
// - references-view.tree.resetViewLocation
// - remote-containers.addExtensionToConfig
// - remote-containers.attachToContainerInCurrentWindow
// - remote-containers.attachToContainerInNewWindow
// - remote-containers.attachToK8sContainer
// - remote-containers.attachToK8sContainerFromViewlet
// - remote-containers.attachToRunningContainer
// - remote-containers.attachToRunningContainerFromViewlet
// - remote-containers.checkoutPRInVolume
// - remote-containers.cleanUpDevContainers
// - remote-containers.cloneInVolume
// - remote-containers.cloneInVolumeFromViewlet
// - remote-containers.configureContainerFeatures
// - remote-containers.createDevContainer
// - remote-containers.createDevContainerFile
// - remote-containers.createDevContainerFileWithCopilot
// - remote-containers.explorerDetailsRefresh
// - remote-containers.explorerTargetsRefresh
// - remote-containers.explorerVolumesRefresh
// - remote-containers.getHelp
// - remote-containers.getStarted
// - remote-containers.inspectDockerResource
// - remote-containers.inspectInBasicDevContainer
// - remote-containers.inspectVolume
// - remote-containers.inspectVolumeFromViewlet
// - remote-containers.installDocker
// - remote-containers.installDockerInWSL
// - remote-containers.installUserCLI
// - remote-containers.labelPortAndUpdateConfig
// - remote-containers.newContainer
// - remote-containers.openAttachConfigByNameFile
// - remote-containers.openAttachDevContainerFile
// - remote-containers.openDevContainerFile
// - remote-containers.openFolder
// - remote-containers.openFolderInContainerInCurrentWindow
// - remote-containers.openFolderInContainerInNewWindow
// - remote-containers.openInformationAboutMountPerformance
// - remote-containers.openLastLogFile
// - remote-containers.openLogFile
// - remote-containers.openPullRequestInVolume
// - remote-containers.openRepositoryFromGitWithEditSession
// - remote-containers.openRepositoryFromRemoteHubWithEditSession
// - remote-containers.openRepositoryInUniqueVolume
// - remote-containers.openRepositoryInVolume
// - remote-containers.openWorkspace
// - remote-containers.provideFeedback
// - remote-containers.pruneVolumes
// - remote-containers.rebuildAndReopenInContainer
// - remote-containers.rebuildContainer
// - remote-containers.rebuildContainerNoCache
// - remote-containers.rebuildNoCacheAndReopenInContainer
// - remote-containers.removeContainer
// - remote-containers.removeRecentFolder
// - remote-containers.removeVolume
// - remote-containers.reopenInContainer
// - remote-containers.reopenInSSH
// - remote-containers.reopenInTunnel
// - remote-containers.reopenInWSL
// - remote-containers.reopenLocally
// - remote-containers.reportIssue
// - remote-containers.revealLogTerminal
// - remote-containers.settings
// - remote-containers.showContainerLog
// - remote-containers.showDetails
// - remote-containers.showRecoveryContainerNotificationReset
// - remote-containers.showReopenInContainerNotificationReset
// - remote-containers.startContainer
// - remote-containers.stopContainer
// - remote-containers.switchContainer
// - remote-containers.testConnection
// - remote-containers.trySample
// - remote.tunnel.changeLocalPort
// - remote.tunnel.closeCommandPalette
// - remote.tunnel.copyAddressCommandPalette
// - remote.tunnel.forwardCommandPalette
// - remote.tunnel.forwardInline
// - remote.tunnel.open
// - remote.tunnel.openCommandPalette
// - remote.tunnel.openPreview
// - remote.tunnel.setProtocolHttp
// - remote.tunnel.setProtocolHttps
// - removeRootFolder
// - repl.action.copyAll
// - replacePreviousChar
// - repositoryTracker.getStoredPath
// - repositoryTracker.isOrInCurrentWorkspace
// - resetGettingStartedProgress
// - rest-client.clear-aad-token-cache
// - rest-client.clear-history
// - rest-client.copy-codesnippet
// - rest-client.copy-request-as-curl
// - rest-client.copy-response-body
// - rest-client.fold-response
// - rest-client.save-response
// - rest-client.save-response-body
// - rest-client.unfold-response
// - revealInExplorer
// - rust-analyzer.analyzerStatus
// - rust-analyzer.cancelFlycheck
// - rust-analyzer.childModules
// - rust-analyzer.clearFlycheck
// - rust-analyzer.copyRunCommandLine
// - rust-analyzer.debug
// - rust-analyzer.expandMacro
// - rust-analyzer.interpretFunction
// - rust-analyzer.matchingBrace
// - rust-analyzer.memoryUsage
// - rust-analyzer.moveItemDown
// - rust-analyzer.moveItemUp
// - rust-analyzer.newDebugConfig
// - rust-analyzer.onEnter
// - rust-analyzer.openCargoToml
// - rust-analyzer.openDocs
// - rust-analyzer.openExternalDocs
// - rust-analyzer.openWalkthrough
// - rust-analyzer.peekTests
// - rust-analyzer.rebuildProcMacros
// - rust-analyzer.reloadWorkspace
// - rust-analyzer.restartServer
// - rust-analyzer.revealDependency
// - rust-analyzer.run
// - rust-analyzer.runFlycheck
// - rust-analyzer.serverVersion
// - rust-analyzer.ssr
// - rust-analyzer.startServer
// - rust-analyzer.stopServer
// - rust-analyzer.syntaxTreeCopy
// - rust-analyzer.syntaxTreeHideWhitespace
// - rust-analyzer.syntaxTreeReveal
// - rust-analyzer.syntaxTreeShowWhitespace
// - rust-analyzer.toggleCheckOnSave
// - rust-analyzer.toggleLSPLogs
// - rust-analyzer.viewCrateGraph
// - rust-analyzer.viewFileText
// - rust-analyzer.viewFullCrateGraph
// - rust-analyzer.viewHir
// - rust-analyzer.viewItemTree
// - rust-analyzer.viewMemoryLayout
// - rust-analyzer.viewMir
// - rustDependencies.focus
// - rustDependencies.removeView
// - rustDependencies.resetViewLocation
// - rustDependencies.toggleVisibility
// - rustSyntaxTree.focus
// - rustSyntaxTree.resetViewLocation
// - scm.openInIntegratedTerminal
// - scm.openInTerminal
// - scm.setActiveProvider
// - scrollEditorBottom
// - scrollEditorTop
// - scrollLeft
// - scrollRight
// - search.action.clearHistory
// - search.action.clearSearchResults
// - search.action.collapseSearchResults
// - search.action.copyAll
// - search.action.excludeFromSearch
// - search.action.expandRecursively
// - search.action.expandSearchResults
// - search.action.focusFilesToExclude
// - search.action.focusFilesToInclude
// - search.action.focusSearchList
// - search.action.getSearchResults
// - search.action.openEditor
// - search.action.openNewEditor
// - search.action.openNewEditorFromView
// - search.action.openNewEditorToSide
// - search.action.refreshSearchResults
// - search.action.revealInSideBar
// - search.action.viewAsList
// - search.action.viewAsTree
// - selectFirstSuggestion
// - selectForCompare
// - selectLastSuggestion
// - setRootFolder
// - setSelection
// - settings.filterByOnline
// - settings.filterByTelemetry
// - settings.filterUntrusted
// - settings.switchToJSON
// - showCustomTitleBar
// - showEditorScreenReaderNotification
// - signals.sounds.help
// - simpleBrowser.show
// - tailwindCSS.showOutput
// - tailwindCSS.sortSelection
// - targetsContainers.focus
// - targetsContainers.resetViewLocation
// - templ.restartServer
// - terminal.focus
// - terminal.removeView
// - terminal.resetViewContainerLocation
// - terminal.resetViewLocation
// - terminal.toggleVisibility
// - terraform.cloud.login
// - terraform.cloud.organization.picker
// - terraform.cloud.run.apply.downloadLog
// - terraform.cloud.run.apply.focus
// - terraform.cloud.run.apply.resetViewLocation
// - terraform.cloud.run.plan.downloadLog
// - terraform.cloud.run.plan.focus
// - terraform.cloud.run.plan.resetViewLocation
// - terraform.cloud.run.viewApply
// - terraform.cloud.run.viewInBrowser
// - terraform.cloud.run.viewPlan
// - terraform.cloud.runs.focus
// - terraform.cloud.runs.refresh
// - terraform.cloud.runs.removeView
// - terraform.cloud.runs.resetViewLocation
// - terraform.cloud.runs.toggleVisibility
// - terraform.cloud.workspaces.filterByProject
// - terraform.cloud.workspaces.focus
// - terraform.cloud.workspaces.refresh
// - terraform.cloud.workspaces.removeView
// - terraform.cloud.workspaces.resetViewLocation
// - terraform.cloud.workspaces.toggleVisibility
// - terraform.cloud.workspaces.viewInBrowser
// - terraform.disableLanguageServer
// - terraform.enableLanguageServer
// - terraform.generateBugReport
// - terraform.init
// - terraform.initCurrent
// - terraform.modules.focus
// - terraform.modules.openDocumentation
// - terraform.modules.refreshList
// - terraform.modules.removeView
// - terraform.modules.resetViewLocation
// - terraform.modules.toggleVisibility
// - terraform.plan
// - terraform.providers.focus
// - terraform.providers.openDocumentation
// - terraform.providers.refreshList
// - terraform.providers.removeView
// - terraform.providers.resetViewLocation
// - terraform.providers.toggleVisibility
// - terraform.validate
// - testing.callStack.debug
// - testing.callStack.run
// - testing.cancelTestRefresh
// - testing.clearTestResults
// - testing.collapseAll
// - testing.collapsePeekStack
// - testing.configureProfile
// - testing.continuousRunUsingForTest
// - testing.coverage
// - testing.coverage.close
// - testing.coverage.uri
// - testing.coverageFilterToTest
// - testing.coverageFilterToTestInEditor
// - testing.coverageSelected
// - testing.coverageToggleToolbar
// - testing.coverageViewChangeSorting
// - testing.debug
// - testing.debug.uri
// - testing.debugSelected
// - testing.getSelectedProfiles
// - testing.goToRelatedCode
// - testing.goToRelatedTest
// - testing.hideTest
// - testing.openCoverage
// - testing.openMessageInEditor
// - testing.peekRelatedCode
// - testing.peekRelatedTest
// - testing.run
// - testing.run.uri
// - testing.runSelected
// - testing.runUsing
// - testing.searchForTestExtension
// - testing.selectDefaultTestProfiles
// - testing.sortByDuration
// - testing.sortByLocation
// - testing.sortByStatus
// - testing.startContinuousRun
// - testing.startContinuousRunFromExtension
// - testing.stopContinuousRun
// - testing.stopContinuousRunFromExtension
// - testing.toggleContinuousRunForTest
// - testing.unhideAllTests
// - testing.unhideTest
// - testing.viewAsList
// - testing.viewAsTree
// - timeline.focus
// - timeline.refresh
// - timeline.removeView
// - timeline.resetViewLocation
// - timeline.toggleExcludeSource:git-history
// - timeline.toggleExcludeSource:timeline.localHistory
// - timeline.toggleFollowActiveEditor
// - timeline.toggleVisibility
// - toggle.diff.ignoreTrimWhitespace
// - toggle.diff.renderSideBySide
// - toggle.toggleCustomTitleBar
// - toggle.window.commandCenter
// - toggle.window.customTitleBarVisibility
// - toggle.window.customTitleBarVisibility.windowed
// - toggle.workbench.editor.editorActionsLocation
// - toggle.workbench.experimental.share.enabled
// - toggle.workbench.layoutControl.enabled
// - toggle.workbench.navigationControl.enabled
// - tooltip.close.register
// - tree.toggleStickyScroll
// - tunnel-forwarding.restart
// - tunnel-forwarding.showLog
// - typescript.experimental.disableTsgo
// - typescript.experimental.enableTsgo
// - typescript.findAllFileReferences
// - typescript.goToProjectConfig
// - typescript.goToSourceDefinition
// - typescript.openTsServerLog
// - typescript.reloadProjects
// - typescript.removeUnusedImports
// - typescript.reselectNodeVersion
// - typescript.restartTsServer
// - typescript.selectTypeScriptVersion
// - typescript.sortImports
// - update.check
// - update.checkForUpdate
// - update.checking
// - update.downloadNow
// - update.downloadUpdate
// - update.downloading
// - update.install
// - update.installUpdate
// - update.restart
// - update.restartToUpdate
// - update.showCurrentReleaseNotes
// - update.showUpdateReleaseNotes
// - update.updating
// - variables.collapse
// - vscode-containers.activateContainerRuntimeProviders
// - vscode-containers.activateRegistryProviders
// - vscode-containers.chooseContainerRuntime
// - vscode-containers.compose.down
// - vscode-containers.compose.restart
// - vscode-containers.compose.up
// - vscode-containers.compose.up.subset
// - vscode-containers.configure
// - vscode-containers.configureCompose
// - vscode-containers.containers.attachShell
// - vscode-containers.containers.browse
// - vscode-containers.containers.composeGroup.down
// - vscode-containers.containers.composeGroup.logs
// - vscode-containers.containers.composeGroup.restart
// - vscode-containers.containers.composeGroup.start
// - vscode-containers.containers.composeGroup.stop
// - vscode-containers.containers.configureExplorer
// - vscode-containers.containers.downloadFile
// - vscode-containers.containers.group.remove
// - vscode-containers.containers.inspect
// - vscode-containers.containers.openFile
// - vscode-containers.containers.prune
// - vscode-containers.containers.refresh
// - vscode-containers.containers.remove
// - vscode-containers.containers.restart
// - vscode-containers.containers.select
// - vscode-containers.containers.start
// - vscode-containers.containers.stats
// - vscode-containers.containers.stop
// - vscode-containers.containers.viewLogs
// - vscode-containers.contexts.configureExplorer
// - vscode-containers.contexts.help
// - vscode-containers.contexts.inspect
// - vscode-containers.contexts.refresh
// - vscode-containers.contexts.remove
// - vscode-containers.contexts.use
// - vscode-containers.debugging.initializeForDebugging
// - vscode-containers.help
// - vscode-containers.help.openWalkthrough
// - vscode-containers.help.reportIssue
// - vscode-containers.images.build
// - vscode-containers.images.configureExplorer
// - vscode-containers.images.copyFullTag
// - vscode-containers.images.group.remove
// - vscode-containers.images.hideDangling
// - vscode-containers.images.inspect
// - vscode-containers.images.prune
// - vscode-containers.images.pull
// - vscode-containers.images.push
// - vscode-containers.images.refresh
// - vscode-containers.images.remove
// - vscode-containers.images.run
// - vscode-containers.images.runAzureCli
// - vscode-containers.images.runInteractive
// - vscode-containers.images.showDangling
// - vscode-containers.images.tag
// - vscode-containers.networks.configureExplorer
// - vscode-containers.networks.create
// - vscode-containers.networks.inspect
// - vscode-containers.networks.prune
// - vscode-containers.networks.refresh
// - vscode-containers.networks.remove
// - vscode-containers.openDockerDownloadPage
// - vscode-containers.pruneSystem
// - vscode-containers.registries.azure.buildImage
// - vscode-containers.registries.azure.createRegistry
// - vscode-containers.registries.azure.deleteRegistry
// - vscode-containers.registries.azure.deleteRepository
// - vscode-containers.registries.azure.openInPortal
// - vscode-containers.registries.azure.untagImage
// - vscode-containers.registries.azure.viewProperties
// - vscode-containers.registries.connectRegistry
// - vscode-containers.registries.copyImageDigest
// - vscode-containers.registries.copyRemoteFullTag
// - vscode-containers.registries.deleteImage
// - vscode-containers.registries.deployImageToAca
// - vscode-containers.registries.deployImageToAzure
// - vscode-containers.registries.disconnectRegistry
// - vscode-containers.registries.dockerHub.openInBrowser
// - vscode-containers.registries.genericV2.addTrackedRegistry
// - vscode-containers.registries.genericV2.removeTrackedRegistry
// - vscode-containers.registries.help
// - vscode-containers.registries.inspectRemoteImageManifest
// - vscode-containers.registries.logInToContainerCli
// - vscode-containers.registries.logOutOfContainerCli
// - vscode-containers.registries.pullImage
// - vscode-containers.registries.pullRepository
// - vscode-containers.registries.reconnectRegistry
// - vscode-containers.registries.refresh
// - vscode-containers.views.containers.focus
// - vscode-containers.views.containers.removeView
// - vscode-containers.views.containers.resetViewLocation
// - vscode-containers.views.containers.toggleVisibility
// - vscode-containers.views.dockerContexts.focus
// - vscode-containers.views.dockerContexts.removeView
// - vscode-containers.views.dockerContexts.resetViewLocation
// - vscode-containers.views.dockerContexts.toggleVisibility
// - vscode-containers.views.help.focus
// - vscode-containers.views.help.removeView
// - vscode-containers.views.help.resetViewLocation
// - vscode-containers.views.help.toggleVisibility
// - vscode-containers.views.images.focus
// - vscode-containers.views.images.removeView
// - vscode-containers.views.images.resetViewLocation
// - vscode-containers.views.images.toggleVisibility
// - vscode-containers.views.networks.focus
// - vscode-containers.views.networks.removeView
// - vscode-containers.views.networks.resetViewLocation
// - vscode-containers.views.networks.toggleVisibility
// - vscode-containers.views.registries.focus
// - vscode-containers.views.registries.removeView
// - vscode-containers.views.registries.resetViewLocation
// - vscode-containers.views.registries.toggleVisibility
// - vscode-containers.views.volumes.focus
// - vscode-containers.views.volumes.removeView
// - vscode-containers.views.volumes.resetViewLocation
// - vscode-containers.views.volumes.toggleVisibility
// - vscode-containers.volumes.configureExplorer
// - vscode-containers.volumes.inspect
// - vscode-containers.volumes.prune
// - vscode-containers.volumes.refresh
// - vscode-containers.volumes.remove
// - vscode-html-css.clear
// - vscode-html-css.validate
// - walkthroughs.selectStep
// - watch.collapse
// - welcome.markStepComplete
// - welcome.markStepIncomplete
// - welcome.showAllWalkthroughs
// - workbench.action.acceptSelectedQuickOpenItem
// - workbench.action.activityBarLocation.default
// - workbench.action.addRootFolder
// - workbench.action.alignPanelCenter
// - workbench.action.alignPanelJustify
// - workbench.action.alignPanelLeft
// - workbench.action.alignPanelRight
// - workbench.action.alignQuickInputCenter
// - workbench.action.alignQuickInputTop
// - workbench.action.alternativeAcceptSelectedQuickOpenItem
// - workbench.action.backgroundComposer.applyChangesLocallyFromPeekContent
// - workbench.action.backgroundComposer.archive
// - workbench.action.backgroundComposer.archiveFromPeekContent
// - workbench.action.backgroundComposer.checkoutLocally
// - workbench.action.backgroundComposer.checkoutLocallyFromPane
// - workbench.action.backgroundComposer.checkoutLocallyFromPeekContent
// - workbench.action.backgroundComposer.closeModal
// - workbench.action.backgroundComposer.copyBCId
// - workbench.action.backgroundComposer.copyRequestIdFromPane
// - workbench.action.backgroundComposer.createNewComposerTab
// - workbench.action.backgroundComposer.createNewComposerWithPrevContext
// - workbench.action.backgroundComposer.createPRFromPeekContent
// - workbench.action.backgroundComposer.createPullRequestFromPane
// - workbench.action.backgroundComposer.goBackToLocalMachineAndCreateComposer
// - workbench.action.backgroundComposer.importToLocalChat
// - workbench.action.backgroundComposer.notifyWindowContainerClosed
// - workbench.action.backgroundComposer.openBackgroundModalInput
// - workbench.action.backgroundComposer.openControlPanel2
// - workbench.action.backgroundComposer.openDevTools
// - workbench.action.backgroundComposer.openDiffInBackgroundComposer
// - workbench.action.backgroundComposer.openFile
// - workbench.action.backgroundComposer.openFileDiff
// - workbench.action.backgroundComposer.openFileInBackgroundComposer
// - workbench.action.backgroundComposer.openForwardedPort
// - workbench.action.backgroundComposer.openMachine
// - workbench.action.backgroundComposer.openMachineFromPeekContent
// - workbench.action.backgroundComposer.openWindowIdForBc
// - workbench.action.backgroundComposer.recordRanTerminalCommandInMainWindow
// - workbench.action.backgroundComposer.refresh
// - workbench.action.backgroundComposer.restartSetup
// - workbench.action.backgroundComposer.revertFile
// - workbench.action.backgroundComposer.showBcIdInThisWindow
// - workbench.action.backgroundComposer.showDeletedFileNotification
// - workbench.action.backgroundComposer.startSetup
// - workbench.action.backgroundComposer.toggleControlPanelFromPane
// - workbench.action.backgroundComposer.updateWindowControls
// - workbench.action.blur
// - workbench.action.browseColorThemesInMarketplace
// - workbench.action.chat.addDynamicVariable
// - workbench.action.chat.addSelectedFilesToWorkingSet
// - workbench.action.chat.addToChatAction
// - workbench.action.chat.assignSelectedAgent
// - workbench.action.chat.copyLink
// - workbench.action.chat.inlineVoiceChat
// - workbench.action.chat.installProviderForVoiceChat
// - workbench.action.chat.openStorageFolder
// - workbench.action.chat.quickVoiceChat
// - workbench.action.chat.readChatResponseAloud
// - workbench.action.chat.resetTrustedTools
// - workbench.action.chat.selectAndInsertFile
// - workbench.action.chat.selectAndInsertFolder
// - workbench.action.chat.selectAndInsertProblems
// - workbench.action.chat.selectAndInsertSym
// - workbench.action.chat.voiceChatInChatView
// - workbench.action.clearCommandHistory
// - workbench.action.clearEditorHistory
// - workbench.action.clearLocalePreference
// - workbench.action.clearRecentFiles
// - workbench.action.closeActivePinnedEditor
// - workbench.action.closeEditorInAllGroups
// - workbench.action.closeEditorsAndGroup
// - workbench.action.closeEditorsInOtherGroups
// - workbench.action.closeEditorsToTheLeft
// - workbench.action.closeEditorsToTheRight
// - workbench.action.closePanel
// - workbench.action.closeSidebar
// - workbench.action.collapseAllComments
// - workbench.action.compareEditor.focusOtherSide
// - workbench.action.compareEditor.focusPrimarySide
// - workbench.action.compareEditor.focusSecondarySide
// - workbench.action.compareEditor.swapSides
// - workbench.action.configureEditor
// - workbench.action.configureEditorTabs
// - workbench.action.configureLanguageBasedSettings
// - workbench.action.configureLocale
// - workbench.action.configureRuntimeArguments
// - workbench.action.continueOn.extensions
// - workbench.action.copyEditorGroupToNewWindow
// - workbench.action.copyRecentCppActions
// - workbench.action.createAndOpenNotepad
// - workbench.action.createTerminalEditor
// - workbench.action.createTerminalEditorSameGroup
// - workbench.action.createTerminalEditorSide
// - workbench.action.customizeLayout
// - workbench.action.debug.callStackBottom
// - workbench.action.debug.callStackDown
// - workbench.action.debug.callStackTop
// - workbench.action.debug.callStackUp
// - workbench.action.debug.configure
// - workbench.action.debug.disconnectAndSuspend
// - workbench.action.debug.focusProcess
// - workbench.action.debug.recordStepByStep
// - workbench.action.debug.restartFrame
// - workbench.action.debug.reverseContinue
// - workbench.action.debug.selectDebugConsole
// - workbench.action.debug.selectDebugSession
// - workbench.action.debug.selectRepl
// - workbench.action.debug.selectandstart
// - workbench.action.debug.showLoadedScripts
// - workbench.action.debug.stepBack
// - workbench.action.debug.stopRecording
// - workbench.action.debug.terminateThread
// - workbench.action.decreaseViewHeight
// - workbench.action.decreaseViewSize
// - workbench.action.decreaseViewWidth
// - workbench.action.developer.captureAndSendDebuggingData
// - workbench.action.developer.captureProfile
// - workbench.action.developer.showProfilingStatus
// - workbench.action.developer.toggleWatchForCrashes
// - workbench.action.disableAutocompletes
// - workbench.action.download
// - workbench.action.duplicateActiveEditorGroupDown
// - workbench.action.duplicateActiveEditorGroupLeft
// - workbench.action.duplicateActiveEditorGroupRight
// - workbench.action.duplicateActiveEditorGroupUp
// - workbench.action.duplicateWorkspaceInNewWindow
// - workbench.action.editor.changeEOL
// - workbench.action.editor.changeEncoding
// - workbench.action.editorActionsDefault
// - workbench.action.editorActionsTitleBar
// - workbench.action.editorLayoutSingle
// - workbench.action.editorLayoutThreeColumns
// - workbench.action.editorLayoutThreeRows
// - workbench.action.editorLayoutTwoByTwoGrid
// - workbench.action.editorLayoutTwoColumns
// - workbench.action.editorLayoutTwoColumnsBottom
// - workbench.action.editorLayoutTwoRows
// - workbench.action.editorLayoutTwoRowsRight
// - workbench.action.edits.addFilesFromReferences
// - workbench.action.evenEditorWidths
// - workbench.action.evenEditorWidthsExcludingAgent
// - workbench.action.expandAllComments
// - workbench.action.expandUnresolvedComments
// - workbench.action.exportLogs
// - workbench.action.files.newFile
// - workbench.action.files.openFileFolderInNewWindow
// - workbench.action.files.openFileInNewWindow
// - workbench.action.files.openFolder
// - workbench.action.files.openFolderInNewWindow
// - workbench.action.files.resetActiveEditorReadonlyInSession
// - workbench.action.files.revert
// - workbench.action.files.saveAll
// - workbench.action.files.saveFiles
// - workbench.action.files.setActiveEditorReadonlyInSession
// - workbench.action.files.setActiveEditorWriteableInSession
// - workbench.action.files.showOpenedFileInNewWindow
// - workbench.action.files.toggleActiveEditorReadonlyInSession
// - workbench.action.firstEditorInGroup
// - workbench.action.focusAboveGroupWithoutWrap
// - workbench.action.focusActiveEditorGroup
// - workbench.action.focusActivityBar
// - workbench.action.focusAuxiliaryBar
// - workbench.action.focusBanner
// - workbench.action.focusBelowGroupWithoutWrap
// - workbench.action.focusCommentOnCurrentLine
// - workbench.action.focusFirstSideEditor
// - workbench.action.focusLastEditorGroup
// - workbench.action.focusLeftGroupWithoutWrap
// - workbench.action.focusNextGroup
// - workbench.action.focusOtherSideEditor
// - workbench.action.focusPanel
// - workbench.action.focusPreviousGroup
// - workbench.action.focusQuickOpen
// - workbench.action.focusRightGroupWithoutWrap
// - workbench.action.focusSecondSideEditor
// - workbench.action.focusStatusBar
// - workbench.action.focusTitleBar
// - workbench.action.generateColorTheme
// - workbench.action.getLastRunningAiActionID
// - workbench.action.getLastRunningCmdKID
// - workbench.action.getStartedWithAccessibilityFeatures
// - workbench.action.hangRendererThread
// - workbench.action.hideEditorActions
// - workbench.action.hideEditorTabs
// - workbench.action.holdLockedScrolling
// - workbench.action.importLog
// - workbench.action.increaseViewHeight
// - workbench.action.increaseViewSize
// - workbench.action.increaseViewWidth
// - workbench.action.inspectContextKeys
// - workbench.action.inspectKeyMappings
// - workbench.action.inspectKeyMappingsJSON
// - workbench.action.installCommandLine
// - workbench.action.joinAllGroups
// - workbench.action.joinTwoGroups
// - workbench.action.localHistory.compareWithFile
// - workbench.action.localHistory.compareWithPrevious
// - workbench.action.localHistory.compareWithSelected
// - workbench.action.localHistory.create
// - workbench.action.localHistory.delete
// - workbench.action.localHistory.deleteAll
// - workbench.action.localHistory.open
// - workbench.action.localHistory.rename
// - workbench.action.localHistory.restore
// - workbench.action.localHistory.restoreViaEditor
// - workbench.action.localHistory.restoreViaPicker
// - workbench.action.localHistory.revealInOS
// - workbench.action.localHistory.selectForCompare
// - workbench.action.lockEditorGroup
// - workbench.action.logDataDirectories
// - workbench.action.logStorage
// - workbench.action.logWorkingCopies
// - workbench.action.manageTrustedDomain
// - workbench.action.maximizeEditorHideSidebar
// - workbench.action.mcp.clearAllTokens
// - workbench.action.mergeAllWindowTabs
// - workbench.action.minimizeOtherEditors
// - workbench.action.minimizeOtherEditorsHideSidebar
// - workbench.action.moveEditorGroupToNewWindow
// - workbench.action.moveEditorToAboveGroup
// - workbench.action.moveEditorToBelowGroup
// - workbench.action.moveEditorToLeftGroup
// - workbench.action.moveEditorToNewWindow
// - workbench.action.moveEditorToRightGroup
// - workbench.action.moveFocusedView
// - workbench.action.movePanelToSecondarySideBar
// - workbench.action.movePanelToSidePanel
// - workbench.action.moveSecondarySideBarToPanel
// - workbench.action.moveSideBarLeft
// - workbench.action.moveSideBarRight
// - workbench.action.moveSidePanelToPanel
// - workbench.action.moveView
// - workbench.action.moveWindowTabToNewWindow
// - workbench.action.navigateBackInEditLocations
// - workbench.action.navigateBackInNavigationLocations
// - workbench.action.navigateDown
// - workbench.action.navigateEditorGroups
// - workbench.action.navigateForwardInEditLocations
// - workbench.action.navigateForwardInNavigationLocations
// - workbench.action.navigateLast
// - workbench.action.navigateLeft
// - workbench.action.navigatePreviousInEditLocations
// - workbench.action.navigatePreviousInNavigationLocations
// - workbench.action.navigateRight
// - workbench.action.navigateToLastNavigationLocation
// - workbench.action.navigateUp
// - workbench.action.newCursorRule
// - workbench.action.newEmptyEditorWindow
// - workbench.action.newGroupAbove
// - workbench.action.newGroupBelow
// - workbench.action.newGroupLeft
// - workbench.action.newGroupRight
// - workbench.action.newWindowTab
// - workbench.action.nextAuxiliaryBarView
// - workbench.action.nextPanelView
// - workbench.action.nextSideBarView
// - workbench.action.openAccessibilitySettings
// - workbench.action.openActiveLogOutputFile
// - workbench.action.openActiveLogOutputFileInNewWindow
// - workbench.action.openApplicationSettingsJson
// - workbench.action.openDefaultKeybindingsFile
// - workbench.action.openEditorAtIndex
// - workbench.action.openExtensionLogsFolder
// - workbench.action.openFolderSettings
// - workbench.action.openFolderSettingsFile
// - workbench.action.openGlobalKeybindingsFile
// - workbench.action.openGlobalSettings
// - workbench.action.openGlobalSettingsCursorAlias
// - workbench.action.openIssueReporter
// - workbench.action.openLayoutSettingsMenu
// - workbench.action.openLicenseUrl
// - workbench.action.openLogFile
// - workbench.action.openLogsFolder
// - workbench.action.openMCPSettings
// - workbench.action.openNextRecentlyUsedEditor
// - workbench.action.openNextRecentlyUsedEditorInGroup
// - workbench.action.openPreviousEditorFromHistory
// - workbench.action.openPreviousRecentlyUsedEditor
// - workbench.action.openPreviousRecentlyUsedEditorInGroup
// - workbench.action.openProcessExplorer
// - workbench.action.openProfile.Default
// - workbench.action.openProfile.Go
// - workbench.action.openProfile.Rust
// - workbench.action.openProfile.Vim Default
// - workbench.action.openRawDefaultSettings
// - workbench.action.openRemoteSettings
// - workbench.action.openRemoteSettingsFile
// - workbench.action.openSettings2
// - workbench.action.openSettingsJson
// - workbench.action.openSnippets
// - workbench.action.openView
// - workbench.action.openWalkthrough
// - workbench.action.openWorkspace
// - workbench.action.openWorkspaceConfigFile
// - workbench.action.openWorkspaceFromEditor
// - workbench.action.openWorkspaceInNewWindow
// - workbench.action.openWorkspaceSettings
// - workbench.action.openWorkspaceSettingsFile
// - workbench.action.output.activeOutputLogLevel.0
// - workbench.action.output.activeOutputLogLevel.1
// - workbench.action.output.activeOutputLogLevel.2
// - workbench.action.output.activeOutputLogLevel.3
// - workbench.action.output.activeOutputLogLevel.4
// - workbench.action.output.activeOutputLogLevel.5
// - workbench.action.output.activeOutputLogLevelDefault
// - workbench.action.output.addCompoundLog
// - workbench.action.output.remove
// - workbench.action.output.show.anysphere.cursor-always-local.Cursor Always Local
// - workbench.action.output.show.anysphere.cursor-always-local.Cursor Tab
// - workbench.action.output.show.anysphere.cursor-always-local.Filesync
// - workbench.action.output.show.anysphere.cursor-retrieval.Cursor Git Graph
// - workbench.action.output.show.anysphere.cursor-retrieval.Cursor Git Indexing
// - workbench.action.output.show.anysphere.cursor-retrieval.Cursor Indexing & Retrieval
// - workbench.action.output.show.anysphere.cursor-retrieval.MCP Logs
// - workbench.action.output.show.eamodio.gitlens.GitLens
// - workbench.action.output.show.eamodio.gitlens.GitLens (Git)
// - workbench.action.output.show.exthost
// - workbench.action.output.show.main
// - workbench.action.output.show.ptyhost
// - workbench.action.output.show.remoteTunnelService
// - workbench.action.output.show.rendererLog
// - workbench.action.output.show.rust-lang.rust-analyzer.rust-analyzer Extension
// - workbench.action.output.show.shared
// - workbench.action.output.show.tasks
// - workbench.action.output.show.terminal
// - workbench.action.output.show.userDataSync
// - workbench.action.output.show.vscode.git.Git
// - workbench.action.output.show.vscode.github-authentication.GitHub Authentication
// - workbench.action.output.show.vscode.github.GitHub
// - workbench.action.output.show.vscode.json-language-features.JSON Language Server
// - workbench.action.output.show.vscodevim.vim.Vim
// - workbench.action.output.show.workerexthost
// - workbench.action.pauseSocketWriting
// - workbench.action.populateFileFromSnippet
// - workbench.action.positionPanelBottom
// - workbench.action.positionPanelLeft
// - workbench.action.positionPanelRight
// - workbench.action.positionPanelTop
// - workbench.action.previewColorTheme
// - workbench.action.previousAuxiliaryBarView
// - workbench.action.previousPanelView
// - workbench.action.previousSideBarView
// - workbench.action.problems.addToChat
// - workbench.action.problems.fixInChat
// - workbench.action.problems.focus
// - workbench.action.quickOpenLeastRecentlyUsedEditor
// - workbench.action.quickOpenNavigateNext
// - workbench.action.quickOpenNavigateNextInTerminalPicker
// - workbench.action.quickOpenNavigatePrevious
// - workbench.action.quickOpenNavigatePreviousInTerminalPicker
// - workbench.action.quickOpenPreviousEditor
// - workbench.action.quickOpenPreviousRecentlyUsedEditor
// - workbench.action.quickOpenRecent
// - workbench.action.quickOpenTerm
// - workbench.action.quickOpenWithModes
// - workbench.action.quickPickManyToggle
// - workbench.action.quickSwitchWindow
// - workbench.action.quickTextSearch
// - workbench.action.reloadWindowWithExtensionsDisabled
// - workbench.action.reloadWindowWithHMR
// - workbench.action.remote.close
// - workbench.action.remote.extensions
// - workbench.action.removeLargeStorageDatabaseEntries
// - workbench.action.removeRootFolder
// - workbench.action.reopenTextEditor
// - workbench.action.reopenWithEditor
// - workbench.action.replaceCommandLine
// - workbench.action.reportAIAction
// - workbench.action.resetFocusedViewLocation
// - workbench.action.resetViewLocations
// - workbench.action.restartExtensionHost
// - workbench.action.restartInTemporaryProfile
// - workbench.action.restoreCommandLine
// - workbench.action.restoreEditorsToMainWindow
// - workbench.action.revealUserDataFolder
// - workbench.action.revertAndCloseActiveEditor
// - workbench.action.saveActiveLogOutputAs
// - workbench.action.saveWorkspaceAs
// - workbench.action.selectIconTheme
// - workbench.action.selectProductIconTheme
// - workbench.action.setDefaultLogLevel
// - workbench.action.setLogLevel
// - workbench.action.setZoomLevel
// - workbench.action.setupBugBot
// - workbench.action.showAboutDialog
// - workbench.action.showAllEditorsByMostRecentlyUsed
// - workbench.action.showEditorActions
// - workbench.action.showEditorTab
// - workbench.action.showEditorsInActiveGroup
// - workbench.action.showEditorsInGroup
// - workbench.action.showEmmetCommands
// - workbench.action.showErrorsWarnings
// - workbench.action.showGPUInfo
// - workbench.action.showInteractivePlayground
// - workbench.action.showLogs
// - workbench.action.showMultipleEditorTabs
// - workbench.action.showNextWindowTab
// - workbench.action.showOutputChannels
// - workbench.action.showPreviousWindowTab
// - workbench.action.showRuntimeExtensions
// - workbench.action.showTelemetry
// - workbench.action.showWindowLog
// - workbench.action.splitEditorToAboveGroup
// - workbench.action.splitEditorToBelowGroup
// - workbench.action.splitEditorToFirstGroup
// - workbench.action.splitEditorToLastGroup
// - workbench.action.splitEditorToLeftGroup
// - workbench.action.splitEditorToNextGroup
// - workbench.action.splitEditorToPreviousGroup
// - workbench.action.splitEditorToRightGroup
// - workbench.action.stopTracing
// - workbench.action.tasks.configureDefaultBuildTask
// - workbench.action.tasks.configureDefaultTestTask
// - workbench.action.tasks.configureTaskRunner
// - workbench.action.tasks.manageAutomaticRunning
// - workbench.action.tasks.openUserTasks
// - workbench.action.tasks.openWorkspaceFileTasks
// - workbench.action.tasks.reRunTask
// - workbench.action.tasks.restartTask
// - workbench.action.tasks.runTask
// - workbench.action.tasks.showLog
// - workbench.action.tasks.showTasks
// - workbench.action.tasks.terminate
// - workbench.action.tasks.test
// - workbench.action.tasks.toggleProblems
// - workbench.action.terminal.addTooltip
// - workbench.action.terminal.attachToSession
// - workbench.action.terminal.changeColor
// - workbench.action.terminal.changeColorActiveTab
// - workbench.action.terminal.changeIcon
// - workbench.action.terminal.changeIconActiveTab
// - workbench.action.terminal.chat.viewInChat
// - workbench.action.terminal.clearPreviousSessionHistory
// - workbench.action.terminal.copyAndClearSelection
// - workbench.action.terminal.copyLastCommand
// - workbench.action.terminal.copyLastCommandAndLastCommandOutput
// - workbench.action.terminal.copyLastCommandOutput
// - workbench.action.terminal.copySelectionAsHtml
// - workbench.action.terminal.detachSession
// - workbench.action.terminal.focusAtIndex1
// - workbench.action.terminal.focusAtIndex2
// - workbench.action.terminal.focusAtIndex3
// - workbench.action.terminal.focusAtIndex4
// - workbench.action.terminal.focusAtIndex5
// - workbench.action.terminal.focusAtIndex6
// - workbench.action.terminal.focusAtIndex7
// - workbench.action.terminal.focusAtIndex8
// - workbench.action.terminal.focusAtIndex9
// - workbench.action.terminal.fontZoomIn
// - workbench.action.terminal.fontZoomOut
// - workbench.action.terminal.fontZoomReset
// - workbench.action.terminal.join
// - workbench.action.terminal.joinActiveTab
// - workbench.action.terminal.kill
// - workbench.action.terminal.killAll
// - workbench.action.terminal.killViewOrEditor
// - workbench.action.terminal.moveIntoNewWindow
// - workbench.action.terminal.moveToEditor
// - workbench.action.terminal.moveToTerminalPanel
// - workbench.action.terminal.newInActiveWorkspace
// - workbench.action.terminal.newWithCwd
// - workbench.action.terminal.newWithProfile
// - workbench.action.terminal.openFileLink
// - workbench.action.terminal.openSettings
// - workbench.action.terminal.openUrlLink
// - workbench.action.terminal.recordSession
// - workbench.action.terminal.relaunch
// - workbench.action.terminal.rename
// - workbench.action.terminal.renameWithArg
// - workbench.action.terminal.resetSuggestWidgetSize
// - workbench.action.terminal.restartPtyHost
// - workbench.action.terminal.runActiveFile
// - workbench.action.terminal.runSelectedText
// - workbench.action.terminal.selectDefaultShell
// - workbench.action.terminal.selectToNextLine
// - workbench.action.terminal.selectToPreviousLine
// - workbench.action.terminal.setDimensions
// - workbench.action.terminal.showEnvironmentContributions
// - workbench.action.terminal.showTextureAtlas
// - workbench.action.terminal.splitInActiveWorkspace
// - workbench.action.terminal.switchTerminal
// - workbench.action.terminal.toggleStickyScroll
// - workbench.action.terminal.unsplit
// - workbench.action.terminal.writeDataToTerminal
// - workbench.action.toggleAutoSave
// - workbench.action.toggleCPUProfiler
// - workbench.action.toggleCenteredLayout
// - workbench.action.toggleCommenting
// - workbench.action.toggleConfirmBeforeClose
// - workbench.action.toggleEditorGroupLock
// - workbench.action.toggleEditorType
// - workbench.action.toggleEditorVisibility
// - workbench.action.toggleEditorWidths
// - workbench.action.toggleGCProfiler
// - workbench.action.toggleKeepEditors
// - workbench.action.toggleKeybindingsLog
// - workbench.action.toggleLightDarkThemes
// - workbench.action.toggleLockedScrolling
// - workbench.action.toggleMaximizedPanel
// - workbench.action.toggleMemoryProfiler
// - workbench.action.toggleMultiCursorModifier
// - workbench.action.toggleNotebookClipboardLog
// - workbench.action.toggleScreencastMode
// - workbench.action.toggleSearchOnType
// - workbench.action.toggleSeparatePinnedEditorTabs
// - workbench.action.toggleSidebarPosition
// - workbench.action.toggleSplitEditorInGroup
// - workbench.action.toggleSplitEditorInGroupLayout
// - workbench.action.toggleStatusbarVisibility
// - workbench.action.toggleWindowTabsBar
// - workbench.action.triggerReconnect
// - workbench.action.troubleshootIssue.start
// - workbench.action.troubleshootIssue.stop
// - workbench.action.uninstallCommandLine
// - workbench.action.unlockEditorGroup
// - workbench.action.url.openUrl
// - workbench.action.webview.doNotIgnoreMenuShortcuts
// - workbench.action.webview.openDeveloperTools
// - workbench.action.webview.reloadWebviewAction
// - workbench.action.zenHideEditorTabs
// - workbench.action.zenShowEditorTab
// - workbench.action.zenShowMultipleEditorTabs
// - workbench.actions.table.workbench.panel.markers.view.viewAsTable
// - workbench.actions.table.workbench.panel.markers.view.viewAsTree
// - workbench.actions.treeView.rustDependencies.collapseAll
// - workbench.actions.treeView.rustDependencies.refresh
// - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
// - workbench.actions.view.toggleProblems
// - workbench.actions.workbench.panel.comments.toggleResolvedComments
// - workbench.actions.workbench.panel.comments.toggleSortByResource
// - workbench.actions.workbench.panel.comments.toggleSortByUpdatedAt
// - workbench.actions.workbench.panel.comments.toggleUnResolvedComments
// - workbench.actions.workbench.panel.markers.view.toggleActiveFile
// - workbench.actions.workbench.panel.markers.view.toggleErrors
// - workbench.actions.workbench.panel.markers.view.toggleExcludedFiles
// - workbench.actions.workbench.panel.markers.view.toggleInfos
// - workbench.actions.workbench.panel.markers.view.toggleWarnings
// - workbench.actions.workbench.panel.output.toggle.debug
// - workbench.actions.workbench.panel.output.toggle.error
// - workbench.actions.workbench.panel.output.toggle.info
// - workbench.actions.workbench.panel.output.toggle.trace
// - workbench.actions.workbench.panel.output.toggle.warn
// - workbench.command.prompts.create.local
// - workbench.command.prompts.create.user
// - workbench.debug.action.copyAll
// - workbench.debug.action.focusBreakpointsView
// - workbench.debug.action.focusCallStackView
// - workbench.debug.action.focusRepl
// - workbench.debug.action.focusVariablesView
// - workbench.debug.action.focusWatchView
// - workbench.debug.breakPointsView.removeView
// - workbench.debug.breakPointsView.resetViewLocation
// - workbench.debug.breakPointsView.toggleVisibility
// - workbench.debug.callStackView.resetViewLocation
// - workbench.debug.loadedScriptsView.focus
// - workbench.debug.loadedScriptsView.resetViewLocation
// - workbench.debug.variablesView.resetViewLocation
// - workbench.debug.viewlet.action.addDataBreakpointOnAddress
// - workbench.debug.viewlet.action.addFunctionBreakpointAction
// - workbench.debug.viewlet.action.addWatchExpression
// - workbench.debug.viewlet.action.copyWorkspaceVariableValue
// - workbench.debug.viewlet.action.disableAllBreakpoints
// - workbench.debug.viewlet.action.editDataBreakpointOnAddress
// - workbench.debug.viewlet.action.enableAllBreakpoints
// - workbench.debug.viewlet.action.reapplyBreakpointsAction
// - workbench.debug.viewlet.action.removeAllBreakpoints
// - workbench.debug.viewlet.action.removeAllWatchExpressions
// - workbench.debug.viewlet.action.removeBreakpoint
// - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
// - workbench.debug.viewlet.action.viewMemory
// - workbench.debug.watchExpressionsView.resetViewLocation
// - workbench.debug.welcome.focus
// - workbench.debug.welcome.removeView
// - workbench.debug.welcome.resetViewLocation
// - workbench.debug.welcome.toggleVisibility
// - workbench.editSessions.actions.resetAuth
// - workbench.explorer.agentsView.focus
// - workbench.explorer.agentsView.removeView
// - workbench.explorer.agentsView.resetViewLocation
// - workbench.explorer.agentsView.toggleVisibility
// - workbench.explorer.fileView.focus
// - workbench.explorer.fileView.removeView
// - workbench.explorer.fileView.resetViewLocation
// - workbench.explorer.fileView.toggleVisibility
// - workbench.explorer.openEditorsView.removeView
// - workbench.explorer.openEditorsView.resetViewLocation
// - workbench.explorer.openEditorsView.toggleVisibility
// - workbench.extensions.action.addExtensionToWorkspaceRecommendations
// - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceFolderRecommendations
// - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceRecommendations
// - workbench.extensions.action.checkForUpdates
// - workbench.extensions.action.clearExtensionsSearchResults
// - workbench.extensions.action.clearLanguage
// - workbench.extensions.action.configure
// - workbench.extensions.action.configureKeybindings
// - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
// - workbench.extensions.action.configureWorkspaceRecommendedExtensions
// - workbench.extensions.action.copyExtension
// - workbench.extensions.action.copyExtensionId
// - workbench.extensions.action.copyLink
// - workbench.extensions.action.debugExtensionHost
// - workbench.extensions.action.devtoolsExtensionHost
// - workbench.extensions.action.disableAll
// - workbench.extensions.action.disableAllWorkspace
// - workbench.extensions.action.disableAutoUpdate
// - workbench.extensions.action.download
// - workbench.extensions.action.downloadPreRelease
// - workbench.extensions.action.enableAll
// - workbench.extensions.action.enableAllWorkspace
// - workbench.extensions.action.enableAutoUpdate
// - workbench.extensions.action.extensionHostProfile
// - workbench.extensions.action.extensionUpdates
// - workbench.extensions.action.focusExtensionsView
// - workbench.extensions.action.ignoreRecommendation
// - workbench.extensions.action.install.anotherVersion
// - workbench.extensions.action.install.specificVersion
// - workbench.extensions.action.installAndDonotSync
// - workbench.extensions.action.installExtensionFromLocation
// - workbench.extensions.action.installExtensions
// - workbench.extensions.action.installPrereleaseAndDonotSync
// - workbench.extensions.action.installUnsigned
// - workbench.extensions.action.installVSIX
// - workbench.extensions.action.installWorkspaceRecommendedExtensions
// - workbench.extensions.action.listBuiltInExtensions
// - workbench.extensions.action.listWorkspaceUnsupportedExtensions
// - workbench.extensions.action.manageAccountPreferences
// - workbench.extensions.action.manageAuthorizedExtensionURIs
// - workbench.extensions.action.manageTrustedPublishers
// - workbench.extensions.action.openExtensionHostProfile
// - workbench.extensions.action.openExtensionsFolder
// - workbench.extensions.action.recentlyPublishedExtensions
// - workbench.extensions.action.refreshExtension
// - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
// - workbench.extensions.action.saveExtensionHostProfile
// - workbench.extensions.action.setColorTheme
// - workbench.extensions.action.setFileIconTheme
// - workbench.extensions.action.setProductIconTheme
// - workbench.extensions.action.showDisabledExtensions
// - workbench.extensions.action.showEnabledExtensions
// - workbench.extensions.action.showExtensionsForLanguage
// - workbench.extensions.action.showExtensionsWithIds
// - workbench.extensions.action.showLanguageExtensions
// - workbench.extensions.action.showPopularExtensions
// - workbench.extensions.action.showPreReleaseVersion
// - workbench.extensions.action.showRecommendedExtensions
// - workbench.extensions.action.showRecommendedKeymapExtensions
// - workbench.extensions.action.showReleasedVersion
// - workbench.extensions.action.stopExtensionHostProfile
// - workbench.extensions.action.switchToPreRlease
// - workbench.extensions.action.switchToRelease
// - workbench.extensions.action.toggleApplyToAllProfiles
// - workbench.extensions.action.toggleAutoUpdateForExtension
// - workbench.extensions.action.toggleAutoUpdatesForPublisher
// - workbench.extensions.action.toggleIgnoreExtension
// - workbench.extensions.action.undoIgnoredRecommendation
// - workbench.extensions.action.updateAllExtensions
// - workbench.extensions.command.installFromVSIX
// - workbench.extensions.installMissingDependencies
// - workbench.files.action.acceptLocalChanges
// - workbench.files.action.collapseExplorerFolders
// - workbench.files.action.compareFileWith
// - workbench.files.action.compareNewUntitledTextFiles
// - workbench.files.action.createFileFromExplorer
// - workbench.files.action.createFolderFromExplorer
// - workbench.files.action.focusFilesExplorer
// - workbench.files.action.refreshFilesExplorer
// - workbench.files.action.revertLocalChanges
// - workbench.files.action.saveAllInGroup
// - workbench.files.action.showActiveFileInExplorer
// - workbench.getCodeExchangeProxyEndpoints
// - workbench.notebook.layout.configure
// - workbench.notebook.layout.configure.editorTitle
// - workbench.notebook.layout.gettingStarted
// - workbench.notebook.layout.select
// - workbench.notebook.layout.webview.reset
// - workbench.output.action.clearOutput
// - workbench.output.action.switchBetweenOutputs
// - workbench.output.action.toggleAutoScroll
// - workbench.panel.aichat.2c96bbb0-20cc-41f8-99ef-4eb56adc48b2
// - workbench.panel.aichat.2c96bbb0-20cc-41f8-99ef-4eb56adc48b2.resetViewContainerLocation
// - workbench.panel.aichat.view.02ffc609-af74-4c29-89ce-936b1d1a94cb.focus
// - workbench.panel.aichat.view.02ffc609-af74-4c29-89ce-936b1d1a94cb.removeView
// - workbench.panel.aichat.view.02ffc609-af74-4c29-89ce-936b1d1a94cb.resetViewLocation
// - workbench.panel.aichat.view.02ffc609-af74-4c29-89ce-936b1d1a94cb.toggleVisibility
// - workbench.panel.chat.resetViewContainerLocation
// - workbench.panel.chat.view.copilot.focus
// - workbench.panel.chat.view.copilot.resetViewLocation
// - workbench.panel.chat.view.edits.focus
// - workbench.panel.chat.view.edits.resetViewLocation
// - workbench.panel.chatEditing.resetViewContainerLocation
// - workbench.panel.markers.resetViewContainerLocation
// - workbench.panel.markers.view.focus
// - workbench.panel.markers.view.removeView
// - workbench.panel.markers.view.resetViewLocation
// - workbench.panel.markers.view.toggleVisibility
// - workbench.panel.output.focus
// - workbench.panel.output.removeView
// - workbench.panel.output.resetViewContainerLocation
// - workbench.panel.output.resetViewLocation
// - workbench.panel.output.toggleVisibility
// - workbench.panel.repl.resetViewContainerLocation
// - workbench.panel.repl.view.focus
// - workbench.panel.repl.view.removeView
// - workbench.panel.repl.view.resetViewLocation
// - workbench.panel.repl.view.toggleVisibility
// - workbench.panel.testResults.resetViewContainerLocation
// - workbench.panel.testResults.view.focus
// - workbench.panel.testResults.view.resetViewLocation
// - workbench.profiles.actions.cleanupProfiles
// - workbench.profiles.actions.createFromCurrentProfile
// - workbench.profiles.actions.createProfile
// - workbench.profiles.actions.createTemporaryProfile
// - workbench.profiles.actions.deleteProfile
// - workbench.profiles.actions.exportProfile
// - workbench.profiles.actions.help
// - workbench.profiles.actions.manageProfiles
// - workbench.profiles.actions.newWindowWithProfile
// - workbench.profiles.actions.profileEntry.-2cc8c508
// - workbench.profiles.actions.profileEntry.-7ac4998a
// - workbench.profiles.actions.profileEntry.18b46c9a
// - workbench.profiles.actions.profileEntry.__default__profile__
// - workbench.profiles.actions.resetWorkspaces
// - workbench.profiles.actions.switchProfile
// - workbench.scm.action.collapseAllRepositories
// - workbench.scm.action.expandAllRepositories
// - workbench.scm.action.focusNextInput
// - workbench.scm.action.focusNextResourceGroup
// - workbench.scm.action.focusPreviousInput
// - workbench.scm.action.focusPreviousResourceGroup
// - workbench.scm.action.graph.pickHistoryItemRefs
// - workbench.scm.action.graph.pickRepository
// - workbench.scm.action.graph.refresh
// - workbench.scm.action.graph.revealCurrentHistoryItem
// - workbench.scm.action.graph.viewChanges
// - workbench.scm.action.repositories.setSortKey.discoveryTime
// - workbench.scm.action.repositories.setSortKey.name
// - workbench.scm.action.repositories.setSortKey.path
// - workbench.scm.action.setListViewMode
// - workbench.scm.action.setListViewModeNavigation
// - workbench.scm.action.setSortKey.name
// - workbench.scm.action.setSortKey.path
// - workbench.scm.action.setSortKey.status
// - workbench.scm.action.setTreeViewMode
// - workbench.scm.action.setTreeViewModeNavigation
// - workbench.scm.focus
// - workbench.scm.history.focus
// - workbench.scm.history.resetViewLocation
// - workbench.scm.removeView
// - workbench.scm.repositories.focus
// - workbench.scm.repositories.resetViewLocation
// - workbench.scm.resetViewLocation
// - workbench.scm.toggleVisibility
// - workbench.trust.configure
// - workbench.trust.manage
// - workbench.userData.actions.openSyncBackupsFolder
// - workbench.userDataSync.actions.downloadSyncActivity
// - workbench.view.agents.resetViewContainerLocation
// - workbench.view.debug.resetViewContainerLocation
// - workbench.view.explorer.resetViewContainerLocation
// - workbench.view.extension.42crunch-platform
// - workbench.view.extension.42crunch-platform.resetViewContainerLocation
// - workbench.view.extension.containersView
// - workbench.view.extension.containersView.resetViewContainerLocation
// - workbench.view.extension.gitlens
// - workbench.view.extension.gitlens.resetViewContainerLocation
// - workbench.view.extension.gitlensInspect
// - workbench.view.extension.gitlensInspect.resetViewContainerLocation
// - workbench.view.extension.gitlensPanel
// - workbench.view.extension.gitlensPanel.resetViewContainerLocation
// - workbench.view.extension.gitlensPatch
// - workbench.view.extension.gitlensPatch.resetViewContainerLocation
// - workbench.view.extension.openapi-explorer
// - workbench.view.extension.openapi-explorer.resetViewContainerLocation
// - workbench.view.extension.references-view
// - workbench.view.extension.references-view.resetViewContainerLocation
// - workbench.view.extension.rustSyntaxTreeContainer
// - workbench.view.extension.rustSyntaxTreeContainer.resetViewContainerLocation
// - workbench.view.extension.terraform
// - workbench.view.extension.terraform-cloud
// - workbench.view.extension.terraform-cloud-panel
// - workbench.view.extension.terraform-cloud-panel.resetViewContainerLocation
// - workbench.view.extension.terraform-cloud.resetViewContainerLocation
// - workbench.view.extension.terraform.resetViewContainerLocation
// - workbench.view.extension.test
// - workbench.view.extension.test.resetViewContainerLocation
// - workbench.view.extensions.resetViewContainerLocation
// - workbench.view.remote
// - workbench.view.remote.resetViewContainerLocation
// - workbench.view.scm.resetViewContainerLocation
// - workbench.view.search.focus
// - workbench.view.search.removeView
// - workbench.view.search.resetViewContainerLocation
// - workbench.view.search.resetViewLocation
// - workbench.view.search.toggleVisibility
// - workbench.view.testCoverage.focus
// - workbench.view.testCoverage.resetViewLocation
// - workbench.view.testing.focus
// - workbench.view.testing.resetViewLocation
// - workbench.views.extensions.builtinFeatureExtensions.focus
// - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
// - workbench.views.extensions.builtinThemeExtensions.focus
// - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
// - workbench.views.extensions.deprecatedExtensions.focus
// - workbench.views.extensions.deprecatedExtensions.resetViewLocation
// - workbench.views.extensions.disabled.focus
// - workbench.views.extensions.disabled.resetViewLocation
// - workbench.views.extensions.enabled.focus
// - workbench.views.extensions.enabled.resetViewLocation
// - workbench.views.extensions.installed.focus
// - workbench.views.extensions.installed.resetViewLocation
// - workbench.views.extensions.marketplace.focus
// - workbench.views.extensions.marketplace.resetViewLocation
// - workbench.views.extensions.otherRecommendations.focus
// - workbench.views.extensions.otherRecommendations.resetViewLocation
// - workbench.views.extensions.popular.focus
// - workbench.views.extensions.popular.resetViewLocation
// - workbench.views.extensions.searchBuiltin.focus
// - workbench.views.extensions.searchBuiltin.resetViewLocation
// - workbench.views.extensions.searchDisabled.focus
// - workbench.views.extensions.searchDisabled.resetViewLocation
// - workbench.views.extensions.searchEnabled.focus
// - workbench.views.extensions.searchEnabled.resetViewLocation
// - workbench.views.extensions.searchInstalled.focus
// - workbench.views.extensions.searchInstalled.resetViewLocation
// - workbench.views.extensions.searchOutdated.focus
// - workbench.views.extensions.searchOutdated.resetViewLocation
// - workbench.views.extensions.searchRecentlyUpdated.focus
// - workbench.views.extensions.searchRecentlyUpdated.resetViewLocation
// - workbench.views.extensions.searchWorkspaceUnsupported.focus
// - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.untrustedUnsupportedExtensions.focus
// - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
// - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualUnsupportedExtensions.focus
// - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.workspaceRecommendations.focus
// - workbench.views.extensions.workspaceRecommendations.resetViewLocation
// - ~remote.forwardedPorts.focus
// - ~remote.forwardedPorts.removeView
// - ~remote.forwardedPorts.resetViewLocation
// - ~remote.forwardedPorts.toggleVisibility
// - ~remote.forwardedPortsContainer
// - ~remote.forwardedPortsContainer.resetViewContainerLocation